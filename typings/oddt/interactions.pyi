"""
This type stub file was generated by pyright.
"""

"""Module calculates interactions between two molecules
(proein-protein, protein-ligand, small-small).
Currently following interacions are implemented:
    * hydrogen bonds
    * halogen bonds
    * pi stacking (parallel and perpendicular)
    * salt bridges
    * hydrophobic contacts
    * pi-cation
    * metal coordination
    * pi-metal
"""
def close_contacts(x, y, cutoff, x_column=..., y_column=..., cutoff_low=...): # -> tuple[Unknown, Unknown]:
    """Returns pairs of atoms which are within close contac distance cutoff.
    The cutoff is semi-inclusive, i.e (cutoff_low, cutoff].

    Parameters
    ----------
    x, y : atom_dict-type numpy array
        Atom dictionaries generated by oddt.toolkit.Molecule objects.

    cutoff : float
        Cutoff distance for close contacts

    x_column, ycolumn : string, (default='coords')
        Column containing coordinates of atoms (or pseudo-atoms,
        i.e. ring centroids)

    cutoff_low : float (default=0.)
        Lower bound of contacts to find (exclusive). Zero by default.
        .. versionadded:: 0.6

    Returns
    -------
    x_, y_ : atom_dict-type numpy array
        Aligned pairs of atoms in close contact for further processing.
    """
    ...

def hbond_acceptor_donor(mol1, mol2, cutoff=..., base_angle=..., tolerance=...): # -> tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, ndarray[Unknown, Unknown]]:
    """Returns pairs of acceptor-donor atoms, which meet H-bond criteria

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute H-bond acceptor and H-bond donor pairs

    cutoff : float, (default=3.5)
        Distance cutoff for A-D pairs

    base_angle : int, (default=120)
        Base angle determining allowed direction of hydrogen bond formation,
        which is devided by the number of neighbors of acceptor atom
        to establish final directional angle

    tolerance : int, (default=30)
        Range (+/- tolerance) from perfect direction (base_angle/n_neighbors)
        in which H-bonds are considered as strict.

    Returns
    -------
    a, d : atom_dict-type numpy array
        Aligned arrays of atoms forming H-bond, firstly acceptors,
        secondly donors.

    strict : numpy array, dtype=bool
        Boolean array align with atom pairs, informing whether atoms
        form 'strict' H-bond (pass all angular cutoffs). If false,
        only distance cutoff is met, therefore the bond is 'crude'.
    """
    ...

def hbonds(mol1, mol2, *args, **kwargs): # -> tuple[Unknown, Unknown, Unknown]:
    """Calculates H-bonds between molecules

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute H-bond acceptor and H-bond donor pairs

    cutoff : float, (default=3.5)
        Distance cutoff for A-D pairs

    base_angle : int, (default=120)
        Base angle determining allowed direction of hydrogen bond formation,
        which is devided by the number of neighbors of acceptor atom
        to establish final directional angle

    tolerance : int, (default=30)
        Range (+/- tolerance) from perfect direction (base_angle/n_neighbors)
        in which H-bonds are considered as strict.

    Returns
    -------
    mol1_atoms, mol2_atoms : atom_dict-type numpy array
        Aligned arrays of atoms forming H-bond

    strict : numpy array, dtype=bool
        Boolean array align with atom pairs, informing whether atoms
        form 'strict' H-bond (pass all angular cutoffs). If false,
        only distance cutoff is met, therefore the bond is 'crude'.
    """
    ...

def halogenbond_acceptor_halogen(mol1, mol2, base_angle_acceptor=..., base_angle_halogen=..., tolerance=..., cutoff=...): # -> tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, ndarray[Unknown, Unknown]]:
    """Returns pairs of acceptor-halogen atoms, which meet halogen bond criteria

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute halogen bond acceptor and halogen pairs

    cutoff : float, (default=4)
        Distance cutoff for A-H pairs

    base_angle_acceptor : int, (default=120)
        Base angle determining allowed direction of halogen bond formation,
        which is devided by the number of neighbors of acceptor atom
        to establish final directional angle

    base_angle_halogen : int (default=180)
        Ideal base angle between halogen bond and halogen-neighbor bond

    tolerance : int, (default=30)
        Range (+/- tolerance) from perfect direction (base_angle/n_neighbors)
        in which halogen bonds are considered as strict.

    Returns
    -------
    a, h : atom_dict-type numpy array
        Aligned arrays of atoms forming halogen bond, firstly acceptors,
        secondly halogens

    strict : numpy array, dtype=bool
        Boolean array align with atom pairs, informing whether atoms
        form 'strict' halogen bond (pass all angular cutoffs). If false,
        only distance cutoff is met, therefore the bond is 'crude'.
    """
    ...

def halogenbonds(mol1, mol2, **kwargs): # -> tuple[Unknown, Unknown, Unknown]:
    """Calculates halogen bonds between molecules

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute halogen bond acceptor and halogen pairs

    cutoff : float, (default=4)
        Distance cutoff for A-H pairs

    base_angle_acceptor : int, (default=120)
        Base angle determining allowed direction of halogen bond formation,
        which is devided by the number of neighbors of acceptor atom
        to establish final directional angle

    base_angle_halogen : int (default=180)
        Ideal base angle between halogen bond and halogen-neighbor bond

    tolerance : int, (default=30)
        Range (+/- tolerance) from perfect direction (base_angle/n_neighbors)
        in which halogen bonds are considered as strict.

    Returns
    -------
    mol1_atoms, mol2_atoms : atom_dict-type numpy array
        Aligned arrays of atoms forming halogen bond

    strict : numpy array, dtype=bool
        Boolean array align with atom pairs, informing whether atoms
        form 'strict' halogen bond (pass all angular cutoffs). If false,
        only distance cutoff is met, therefore the bond is 'crude'.
    """
    ...

def pi_stacking(mol1, mol2, cutoff=..., tolerance=...): # -> tuple[Unknown, Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, ndarray[Unknown, Unknown], ndarray[Unknown, Unknown]]:
    """Returns pairs of rings, which meet pi stacking criteria

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute ring pairs

    cutoff : float, (default=5)
        Distance cutoff for Pi-stacking pairs

    tolerance : int, (default=30)
        Range (+/- tolerance) from perfect direction (parallel or
        perpendicular) in which pi-stackings are considered as strict.

    Returns
    -------
    r1, r2 : ring_dict-type numpy array
        Aligned arrays of rings forming pi-stacking

    strict_parallel : numpy array, dtype=bool
        Boolean array align with ring pairs, informing whether rings
        form 'strict' parallel pi-stacking. If false, only distance cutoff is met,
        therefore the stacking is 'crude'.

    strict_perpendicular : numpy array, dtype=bool
        Boolean array align with ring pairs, informing whether rings
        form 'strict' perpendicular pi-stacking (T-shaped, T-face, etc.).
        If false, only distance cutoff is met, therefore the stacking is 'crude'.
    """
    ...

def salt_bridge_plus_minus(mol1, mol2, cutoff=...): # -> tuple[Unknown, Unknown]:
    """Returns pairs of plus-mins atoms, which meet salt bridge criteria

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute plus and minus pairs

    cutoff : float, (default=4)
        Distance cutoff for A-H pairs

    Returns
    -------
    plus, minus : atom_dict-type numpy array
        Aligned arrays of atoms forming salt bridge, firstly plus, secondly minus

    """
    ...

def salt_bridges(mol1, mol2, *args, **kwargs): # -> tuple[Unknown, Unknown]:
    """Calculates salt bridges between molecules

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute plus and minus pairs

    cutoff : float, (default=4)
        Distance cutoff for plus-minus pairs

    Returns
    -------
    mol1_atoms, mol2_atoms : atom_dict-type numpy array
        Aligned arrays of atoms forming salt bridges
    """
    ...

def hydrophobic_contacts(mol1, mol2, cutoff=...): # -> tuple[Unknown, Unknown]:
    """Calculates hydrophobic contacts between molecules

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute hydrophobe pairs

    cutoff : float, (default=4)
        Distance cutoff for hydrophobe pairs

    Returns
    -------
    mol1_atoms, mol2_atoms : atom_dict-type numpy array
        Aligned arrays of atoms forming hydrophobic contacts

    """
    ...

def pi_cation(mol1, mol2, cutoff=..., tolerance=...): # -> tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, ndarray[Unknown, Unknown]]:
    """Returns pairs of ring-cation atoms, which meet pi-cation criteria

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute ring-cation pairs

    cutoff : float, (default=5)
        Distance cutoff for Pi-cation pairs

    tolerance : int, (default=30)
        Range (+/- tolerance) from perfect direction (perpendicular)
        in which pi-cation are considered as strict.

    Returns
    -------
    r1 : ring_dict-type numpy array
        Aligned rings forming pi-stacking

    plus2 : atom_dict-type numpy array
        Aligned cations forming pi-cation

    strict_parallel : numpy array, dtype=bool
        Boolean array align with ring-cation pairs, informing whether
        they form 'strict' pi-cation. If false, only distance cutoff is met,
        therefore the interaction is 'crude'.

    """
    ...

def acceptor_metal(mol1, mol2, base_angle=..., tolerance=..., cutoff=...): # -> tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, ndarray[Unknown, Unknown]]:
    """Returns pairs of acceptor-metal atoms, which meet metal coordination criteria
    Note: This function is directional (mol1 holds acceptors, mol2 holds metals)

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute acceptor and metal pairs

    cutoff : float, (default=4)
        Distance cutoff for A-M pairs

    base_angle : int, (default=120)
        Base angle determining allowed direction of metal coordination,
        which is devided by the number of neighbors of acceptor atom
        to establish final directional angle

    tolerance : int, (default=30)
        Range (+/- tolerance) from perfect direction (base_angle/n_neighbors)
        in metal coordination are considered as strict.

    Returns
    -------
    a, d : atom_dict-type numpy array
        Aligned arrays of atoms forming metal coordination,
        firstly acceptors, secondly metals.

    strict : numpy array, dtype=bool
        Boolean array align with atom pairs, informing whether atoms
        form 'strict' metal coordination (pass all angular cutoffs).
        If false, only distance cutoff is met, therefore the interaction
        is 'crude'.
    """
    ...

def pi_metal(mol1, mol2, cutoff=..., tolerance=...): # -> tuple[Unknown, Unknown, Unknown] | tuple[Unknown, Unknown, ndarray[Unknown, Unknown]]:
    """Returns pairs of ring-metal atoms, which meet pi-metal criteria

    Parameters
    ----------
    mol1, mol2 : oddt.toolkit.Molecule object
        Molecules to compute ring-metal pairs

    cutoff : float, (default=5)
        Distance cutoff for Pi-metal pairs

    tolerance : int, (default=30)
        Range (+/- tolerance) from perfect direction (perpendicular)
        in which pi-metal are considered as strict.

    Returns
    -------
    r1 : ring_dict-type numpy array
        Aligned rings forming pi-metal

    m : atom_dict-type numpy array
        Aligned metals forming pi-metal

    strict_parallel : numpy array, dtype=bool
        Boolean array align with ring-metal pairs, informing whether
        they form 'strict' pi-metal. If false, only distance cutoff is met,
        therefore the interaction is 'crude'.

    """
    ...

