"""
This type stub file was generated by pyright.
"""

"""Spatial functions included in ODDT
Mainly used by other modules, but can be accessed directly.
"""
def angle(p1, p2, p3): # -> Any:
    """Returns an angle from a series of 3 points (point #2 is centroid).
    Angle is returned in degrees.

    Parameters
    ----------
    p1,p2,p3 : numpy arrays, shape = [n_points, n_dimensions]
        Triplets of points in n-dimensional space, aligned in rows.

    Returns
    -------
    angles : numpy array, shape = [n_points]
        Series of angles in degrees
    """
    ...

def angle_2v(v1, v2): # -> Any:
    """Returns an angle between two vecors.Angle is returned in degrees.

    Parameters
    ----------
    v1,v2 : numpy arrays, shape = [n_vectors, n_dimensions]
        Pairs of vectors in n-dimensional space, aligned in rows.

    Returns
    -------
    angles : numpy array, shape = [n_vectors]
        Series of angles in degrees
    """
    ...

def dihedral(p1, p2, p3, p4): # -> Any:
    """Returns an dihedral angle from a series of 4 points.
    Dihedral is returned in degrees.
    Function distingishes clockwise and antyclockwise dihedrals.

    Parameters
    ----------
    p1, p2, p3, p4 : numpy arrays, shape = [n_points, n_dimensions]
        Quadruplets of points in n-dimensional space, aligned in rows.

    Returns
    -------
    angles : numpy array, shape = [n_points]
        Series of angles in degrees
    """
    ...

def rmsd(ref, mol, ignore_h=..., method=..., normalize=...): # -> Any | None:
    """Computes root mean square deviation (RMSD) between two molecules
    (including or excluding Hydrogens). No symmetry checks are performed.

    Parameters
    ----------
    ref : oddt.toolkit.Molecule object
        Reference molecule for the RMSD calculation

    mol : oddt.toolkit.Molecule object
        Query molecule for RMSD calculation

    ignore_h : bool (default=False)
        Flag indicating to ignore Hydrogen atoms while performing RMSD
        calculation. This toggle works only with 'hungarian' method and without
        sorting (method=None).

    method : str (default=None)
        The method to be used for atom asignment between ref and mol.
        None means that direct matching is applied, which is the default
        behavior.
        Available methods:
            - canonize - match heavy atoms using canonical ordering (it forces
            ignoring H's)
            - hungarian - minimize RMSD using Hungarian algorithm
            - min_symmetry - makes multiple molecule-molecule matches and finds
            minimal RMSD (the slowest). Hydrogens are ignored.

    normalize : bool (default=False)
        Normalize RMSD by square root of rot. bonds

    Returns
    -------
    rmsd : float
        RMSD between two molecules
    """
    ...

def distance(x, y): # -> ndarray[Unknown, Unknown]:
    """Computes distance between each pair of points from x and y.

    Parameters
    ----------
    x : numpy arrays, shape = [n_x, 3]
        Array of poinds in 3D

    y : numpy arrays, shape = [n_y, 3]
        Array of poinds in 3D

    Returns
    -------
    dist_matrix : numpy arrays, shape = [n_x, n_y]
        Distance matrix
    """
    ...

def distance_complex(x, y):
    """ Computes distance between points, similar to distance(cdist),
    with major difference - allows higher dimmentions of input (cdist supports 2).
    distance is purely float64 and can de slightly more precise.

    Parameters
    ----------
    x : numpy arrays, shape = [..., 3]
        Array of poinds in 3D

    y : numpy arrays, shape = [..., 3]
        Array of poinds in 3D

    Returns
    -------
    dist_matrix : numpy arrays
        Distance matrix
    """
    ...

def rotate(coords, alpha, beta, gamma):
    """Rotate coords by cerain angle in X, Y, Z. Angles are specified in radians.

    Parameters
    ----------
    coords : numpy arrays, shape = [n_points, 3]
        Coordinates in 3-dimensional space.

    alpha, beta, gamma: float
        Angles to rotate the coordinates along X, Y and Z axis.
        Angles are specified in radians.

    Returns
    -------
    new_coords : numpy arrays, shape = [n_points, 3]
        Rorated coordinates in 3-dimensional space.
    """
    ...

