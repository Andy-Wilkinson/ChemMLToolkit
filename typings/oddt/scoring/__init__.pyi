"""
This type stub file was generated by pyright.
"""

import gzip
import six
import numpy as np
import pandas as pd
import oddt
from os.path import dirname, join as path_join
from itertools import chain
from functools import partial
from six.moves import cPickle as pickle
from scipy.sparse import vstack as sparse_vstack
from joblib import Parallel, delayed
from sklearn.model_selection import KFold, cross_val_score
from sklearn.base import is_classifier, is_regressor
from sklearn.metrics import accuracy_score, r2_score
from oddt.utils import method_caller
from oddt.datasets import pdbbind
from oddt.fingerprints import csr_matrix_to_sparse, fold, sparse_to_csr_matrix

def cross_validate(model, cv_set, cv_target, n=..., shuffle=..., n_jobs=...):
    """Perform cross validation of model using provided data

    Parameters
    ----------
    model: object
        Model to be tested

    cv_set: array-like of shape = [n_samples, n_features]
        Estimated target values.

    cv_target: array-like of shape = [n_samples] or [n_samples, n_outputs]
        Estimated target values.

    n: integer (default = 10)
        How many folds to be created from dataset

    shuffle: bool (default = True)
        Should data be shuffled before folding.

    n_jobs: integer (default = 1)
        How many CPUs to use during cross validation

    Returns
    -------
    r2: array of shape = [n]
        R^2 score for each of generated folds
    """
    ...

class scorer:
    def __init__(self, model_instance, descriptor_generator_instance, score_title=...) -> None:
        """Scorer class is parent class for scoring functions.

        Parameters
        ----------
        model_instance: model
            Medel compatible with sklearn API (fit, predict and score
            methods)

        descriptor_generator_instance: array of descriptors
            Descriptor generator object

        score_title: string
            Title of score to be used.
        """
        ...
    
    def fit(self, ligands, target, *args, **kwargs):
        """Trains model on supplied ligands and target values

        Parameters
        ----------
        ligands: array-like of ligands
            Molecules to featurize and feed into the model

        target: array-like of shape = [n_samples] or [n_samples, n_outputs]
            Ground truth (correct) target values.
        """
        ...
    
    def predict(self, ligands, *args, **kwargs):
        """Predicts values (eg. affinity) for supplied ligands.

        Parameters
        ----------
        ligands: array-like of ligands
            Molecules to featurize and feed into the model

        Returns
        -------
        predicted: np.array or array of np.arrays of shape = [n_ligands]
            Predicted scores for ligands
        """
        ...
    
    def score(self, ligands, target, *args, **kwargs):
        """Methods estimates the quality of prediction using model's default
        score (accuracy for classification or R^2 for regression)

        Parameters
        ----------
        ligands: array-like of ligands
            Molecules to featurize and feed into the model

        target: array-like of shape = [n_samples] or [n_samples, n_outputs]
            Ground truth (correct) target values.

        Returns
        -------
        s: float
            Quality score (accuracy or R^2) for prediction
        """
        ...
    
    def predict_ligand(self, ligand):
        """Local method to score one ligand and update it's scores.

        Parameters
        ----------
        ligand: oddt.toolkit.Molecule object
            Ligand to be scored

        Returns
        -------
        ligand: oddt.toolkit.Molecule object
            Scored ligand with updated scores
        """
        ...
    
    def predict_ligands(self, ligands): # -> Generator[Unknown, None, None]:
        """Method to score ligands in a lazy fashion.

        Parameters
        ----------
        ligands: iterable of oddt.toolkit.Molecule objects
            Ligands to be scored

        Returns
        -------
        ligand: iterator of oddt.toolkit.Molecule objects
            Scored ligands with updated scores
        """
        ...
    
    def set_protein(self, protein): # -> None:
        """Proxy method to update protein in all relevant places.

        Parameters
        ----------
        protein: oddt.toolkit.Molecule object
            New default protein

        """
        ...
    
    def save(self, filename):
        """Saves scoring function to a pickle file.

        Parameters
        ----------
        filename: string
            Pickle filename
        """
        ...
    
    @classmethod
    def load(self, filename): # -> Any:
        """Loads scoring function from a pickle file.

        Parameters
        ----------
        filename: string
            Pickle filename

        Returns
        -------
        sf: scorer-like object
            Scoring function object loaded from a pickle
        """
        ...
    


class ensemble_model:
    def __init__(self, models) -> None:
        """Proxy class to build an ensemble of models with an API as one

        Parameters
        ----------
        models: array
            An array of models
        """
        ...
    
    def fit(self, X, y, *args, **kwargs): # -> ensemble_model:
        ...
    
    def predict(self, X, *args, **kwargs): # -> Any:
        ...
    
    def score(self, X, y, *args, **kwargs): # -> Any | float | ndarray[Unknown, Unknown]:
        ...
    


class ensemble_descriptor:
    def __init__(self, descriptor_generators) -> None:
        """Proxy class to build an ensemble of destriptors with an API as one

        Parameters
        ----------
        models: array
            An array of models
        """
        ...
    
    def build(self, mols, *args, **kwargs): # -> ndarray[Unknown, Unknown]:
        ...
    
    def set_protein(self, protein): # -> None:
        ...
    
    def __len__(self): # -> int:
        """ Returns the dimensions of descriptors """
        ...
    
    def __reduce__(self): # -> tuple[Type[ensemble_descriptor], tuple[Unknown | None]]:
        ...
    


