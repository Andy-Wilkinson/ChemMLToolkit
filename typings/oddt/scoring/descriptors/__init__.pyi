"""
This type stub file was generated by pyright.
"""

import numpy as np
from functools import partial
from scipy.spatial.distance import cdist as distance
from scipy.sparse import vstack as sparse_vstack
from oddt.utils import is_molecule
from oddt.docking import autodock_vina
from oddt.docking.internal import vina_docking
from oddt.fingerprints import sparse_to_csr_matrix

def atoms_by_type(atom_dict, types, mode=...): # -> dict[Unknown, Unknown]:
    """Returns atom dictionaries based on given criteria.
    Currently we have 3 types of atom selection criteria:
        * atomic numbers ['atomic_nums']
        * Sybyl Atom Types ['atom_types_sybyl']
        * AutoDock4 atom types ['atom_types_ad4'] (http://autodock.scripps.edu/faqs-help/faq/where-do-i-set-the-autodock-4-force-field-parameters)

    Parameters
    ----------
    atom_dict: oddt.toolkit.Molecule.atom_dict
        Atom dictionary as implemeted in oddt.toolkit.Molecule class

    types: array-like
        List of atom types/numbers wanted.

    Returns
    -------
    out: dictionary of shape=[len(types)]
        A dictionary of queried atom types (types are keys of the dictionary).
        Values are of oddt.toolkit.Molecule.atom_dict type.
    """
    ...

class close_contacts_descriptor:
    def __init__(self, protein=..., cutoff=..., mode=..., ligand_types=..., protein_types=..., aligned_pairs=...) -> None:
        """Close contacts descriptor which tallies atoms of type X in certain
        cutoff from atoms of type Y.

        Parameters
        ----------
        protein: oddt.toolkit.Molecule or None (default=None)
            Default protein to use as reference

        cutoff: int or list, shape=[n,] or shape=[n,2] (default=4)
            Cutoff for atoms in Angstroms given as an integer or a list of
            ranges, eg. [0, 4, 8, 12] or [[0,4],[4,8],[8,12]].
            Upper bound is always inclusive, lower exclusive.

        mode: string (default='atomic_nums')
            Method of atoms selection, as used in `atoms_by_type`

        ligand_types: array
            List of ligand atom types to use

        protein_types: array
            List of protein atom types to use

        aligned_pairs: bool (default=False)
            Flag indicating should permutation of types should be done,
            otherwise the atoms are treated as aligned pairs.
        """
        ...
    
    def build(self, ligands, protein=...): # -> ndarray[Unknown, Unknown]:
        """Builds descriptors for series of ligands

        Parameters
        ----------
        ligands: iterable of oddt.toolkit.Molecules or oddt.toolkit.Molecule
            A list or iterable of ligands to build the descriptor or a
            single molecule.

        protein: oddt.toolkit.Molecule or None (default=None)
            Default protein to use as reference

        """
        ...
    
    def __len__(self): # -> int:
        """ Returns the dimensions of descriptors """
        ...
    
    def __reduce__(self): # -> tuple[Type[close_contacts_descriptor], tuple[Unknown, Unknown, Unknown, Unknown, Unknown, Unknown]]:
        ...
    


class universal_descriptor:
    def __init__(self, func, protein=..., shape=..., sparse=...) -> None:
        """An universal descriptor which converts a callable object (function)
        to a descriptor generator which can be used in scoring methods.

        .. versionadded:: 0.6

        Parameters
        ----------
        func: object
            A function to be mapped accross all ligands. Can be any callable
            object, which takes ligand as first argument and optionally
            protein key word argument. Additional arguments should be set
            using `functools.partial`.

        protein: oddt.toolkit.Molecule or None (default=None)
            Default protein to use as reference

        """
        ...
    
    def build(self, ligands, protein=...): # -> csr_matrix | csc_matrix | coo_matrix | Any | ndarray[Unknown, Unknown]:
        """Builds descriptors for series of ligands

        Parameters
        ----------
        ligands: iterable of oddt.toolkit.Molecules or oddt.toolkit.Molecule
            A list or iterable of ligands to build the descriptor or a
            single molecule.

        protein: oddt.toolkit.Molecule or None (default=None)
            Default protein to use as reference

        """
        ...
    
    def __len__(self):
        """ Returns the dimensions of descriptors """
        ...
    
    def __reduce__(self): # -> tuple[Type[universal_descriptor], tuple[Unknown, Unknown, Unknown, Unknown]]:
        ...
    


class fingerprints:
    def __init__(self, fp=..., toolkit=...) -> None:
        ...
    
    def build(self, mols): # -> ndarray[Unknown, Unknown]:
        ...
    
    def __reduce__(self): # -> tuple[Type[fingerprints], tuple[()]]:
        ...
    


class autodock_vina_descriptor:
    def __init__(self, protein=..., vina_scores=...) -> None:
        ...
    
    def set_protein(self, protein): # -> None:
        ...
    
    def build(self, ligands, protein=...):
        ...
    
    def __len__(self): # -> int:
        """ Returns the dimensions of descriptors """
        ...
    
    def __reduce__(self): # -> tuple[Type[autodock_vina_descriptor], tuple[Unknown, Unknown | list[str]]]:
        ...
    


class oddt_vina_descriptor:
    def __init__(self, protein=..., vina_scores=...) -> None:
        ...
    
    def set_protein(self, protein): # -> None:
        ...
    
    def build(self, ligands, protein=...):
        ...
    
    def __len__(self): # -> int:
        """ Returns the dimensions of descriptors """
        ...
    
    def __reduce__(self): # -> tuple[Type[oddt_vina_descriptor], tuple[Unknown, Unknown | list[str]]]:
        ...
    


