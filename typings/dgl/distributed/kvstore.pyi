"""
This type stub file was generated by pyright.
"""

from . import rpc

"""Define distributed kvstore"""
KVSTORE_PULL = ...
class PullResponse(rpc.Response):
    """Send the sliced data tensor back to the client.

    Parameters
    ----------
    server_id : int
        ID of current server
    data_tensor : tensor
        sliced data tensor
    """
    def __init__(self, server_id, data_tensor) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class PullRequest(rpc.Request):
    """Send ID tensor to server and get target data tensor as response.

    Parameters
    ----------
    name : str
        data name
    id_tensor : tensor
        a vector storing the data ID
    """
    def __init__(self, name, id_tensor) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> PullResponse:
        ...
    


KVSTORE_PUSH = ...
class PushRequest(rpc.Request):
    """Send ID tensor and data tensor to server and update kvstore's data.

    This request has no response.

    Parameters
    ----------
    name : str
        data name
    id_tensor : tensor
        a vector storing the data ID
    data_tensor : tensor
        a tensor with the same row size of data ID
    """
    def __init__(self, name, id_tensor, data_tensor) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> None:
        ...
    


INIT_DATA = ...
INIT_MSG = ...
class InitDataResponse(rpc.Response):
    """Send a confirmation response (just a short string message) of
    InitDataRequest to client.

    Parameters
    ----------
    msg : string
        string message
    """
    def __init__(self, msg) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class InitDataRequest(rpc.Request):
    """Send meta data to server and init data tensor
    on server using UDF init function.

    Parameters
    ----------
    name : str
        data name
    shape : tuple
        data shape
    dtype : str
        data type string, e.g., 'int64', 'float32', etc.
    policy_str : str
        partition-policy string, e.g., 'edge' or 'node'.
    init_func : function
        UDF init function.
    """
    def __init__(self, name, shape, dtype, policy_str, init_func) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown, Unknown, Unknown, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> InitDataResponse:
        ...
    


BARRIER = ...
BARRIER_MSG = ...
class BarrierResponse(rpc.Response):
    """Send an confimation signal (just a short string message) of
    BarrierRequest to client.

    Parameters
    ----------
    msg : string
        string msg
    """
    def __init__(self, msg) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class BarrierRequest(rpc.Request):
    """Send a barrier signal (just a short string message) to server.

    Parameters
    ----------
    role : string
        client role
    """
    def __init__(self, role) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> list[Unknown] | None:
        ...
    


REGISTER_PULL = ...
REGISTER_PULL_MSG = ...
class RegisterPullHandlerResponse(rpc.Response):
    """Send a confirmation signal (just a short string message) of
    RegisterPullHandler to client.

    Parameters
    ----------
    msg : string
        string message
    """
    def __init__(self, msg) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class RegisterPullHandlerRequest(rpc.Request):
    """Send an UDF and register Pull handler on server.

    Parameters
    ----------
    pull_func : func
        UDF pull handler
    """
    def __init__(self, name, pull_func) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> RegisterPullHandlerResponse:
        ...
    


REGISTER_PUSH = ...
REGISTER_PUSH_MSG = ...
class RegisterPushHandlerResponse(rpc.Response):
    """Send a confirmation signal (just a short string message) of
    RegisterPushHandler to client.

    Parameters
    ----------
    msg : string
        string message
    """
    def __init__(self, msg) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class RegisterPushHandlerRequest(rpc.Request):
    """Send an UDF to register Push handler on server.

    Parameters
    ----------
    push_func : func
        UDF push handler
    """
    def __init__(self, name, push_func) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> RegisterPushHandlerResponse:
        ...
    


GET_SHARED = ...
GET_SHARED_MSG = ...
class GetSharedDataResponse(rpc.Response):
    """Send meta data of shared-memory tensor to client.

    Parameters
    ----------
    meta : dict
        a dict of meta, e.g.,

        {'data_0' : (shape, dtype, policy_str),
         'data_1' : (shape, dtype, policy_str)}
    """
    def __init__(self, meta) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class GetSharedDataRequest(rpc.Request):
    """Send a signal (just a short string message) to get the
    meta data of shared-tensor from server.

    Parameters
    ----------
    msg : string
        string message
    """
    def __init__(self, msg) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> GetSharedDataResponse:
        ...
    


GET_PART_SHAPE = ...
class GetPartShapeResponse(rpc.Response):
    """Send the partitioned data shape back to client.

    Parameters
    ----------
    shape : tuple
        shape of tensor
    """
    def __init__(self, shape) -> None:
        ...
    
    def __getstate__(self): # -> tuple[int]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class GetPartShapeRequest(rpc.Request):
    """Send data name to get the partitioned data shape from server.

    Parameters
    ----------
    name : str
        data name
    """
    def __init__(self, name) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> GetPartShapeResponse:
        ...
    


SEND_META_TO_BACKUP = ...
SEND_META_TO_BACKUP_MSG = ...
class SendMetaToBackupResponse(rpc.Response):
    """Send a confirmation signal (just a short string message)
    of SendMetaToBackupRequest to client.
    """
    def __init__(self, msg) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class SendMetaToBackupRequest(rpc.Request):
    """Send meta data to backup server and backup server
    will use this meta data to read shared-memory tensor.

    Parameters
    ----------
    name : str
        data name
    dtype : str
        data type string
    shape : tuple of int
        data shape
    policy_str : str
        partition-policy string, e.g., 'edge' or 'node'.
    pull_handler : callable
        The callback function when data is pulled from kvstore.
    push_handler : callable
        The callback function when data is pushed to kvstore.
    """
    def __init__(self, name, dtype, shape, policy_str, pull_handler, push_handler) -> None:
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown, Unknown, Unknown, Unknown, Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> SendMetaToBackupResponse:
        ...
    


DELETE_DATA = ...
DELETE_MSG = ...
class DeleteDataResponse(rpc.Response):
    """Send a confirmation signal (just a short string message)
    of DeleteDataRequest to client.
    """
    def __init__(self, msg) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class DeleteDataRequest(rpc.Request):
    """Send message to server to delete data tensor

    Parameters
    ----------
    name : str
        data name
    """
    def __init__(self, name) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> DeleteDataResponse:
        ...
    


COUNT_LOCAL_NONZERO = ...
class CountLocalNonzeroResponse(rpc.Response):
    """Send the number of nonzero value in local data
    """
    def __init__(self, num_local_nonzero) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    


class CountLocalNonzeroRequest(rpc.Request):
    """Send data name to server to count local nonzero value
    Parameters
    ----------
    name : str
        data name
    """
    def __init__(self, name) -> None:
        ...
    
    def __getstate__(self):
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def process_request(self, server_state): # -> CountLocalNonzeroResponse:
        ...
    


def default_push_handler(target, name, id_tensor, data_tensor): # -> None:
    """Default handler for PUSH message.

    On default, _push_handler perform scatter_row() operation for the tensor.

    Parameters
    ----------
    target : tensor
        target tensor
    name : str
        data name
    id_tensor : tensor
        a vector storing the ID list.
    data_tensor : tensor
        a tensor with the same row size of id
    """
    ...

def default_pull_handler(target, name, id_tensor):
    """Default handler for PULL operation.

    On default, _pull_handler perform gather_row() operation for the tensor.

    Parameters
    ----------
    target : tensor
        target tensor
    name : str
        data name
    id_tensor : tensor
        a vector storing the ID list.

    Return
    ------
    tensor
        a tensor with the same row size of ID.
    """
    ...

class KVServer:
    """KVServer is a lightweight key-value store service for DGL distributed training.

    In practice, developers can use KVServer to hold large-scale graph features or
    graph embeddings across machines in a distributed setting. KVServer depends on DGL rpc
    infrastructure thats support backup servers, which means we can lunach many KVServers
    on the same machine for load-balancing.

    DO NOT use KVServer in mult-threads because this behavior is not defined. For now, KVServer
    can only support CPU-to-CPU communication. We may support GPU-communication in the future.

    Parameters
    ----------
    server_id : int
        ID of current server (starts from 0).
    ip_config : str
        Path of IP configuration file.
    num_servers : int
        Server count on each machine.
    num_clients : int
        Total number of KVClients that will be connected to the KVServer.
    """
    def __init__(self, server_id, ip_config, num_servers, num_clients) -> None:
        ...
    
    @property
    def server_id(self):
        """Get server ID"""
        ...
    
    @property
    def barrier_count(self): # -> dict[Unknown, Unknown]:
        """Get barrier count"""
        ...
    
    @barrier_count.setter
    def barrier_count(self, count): # -> None:
        """Set barrier count"""
        ...
    
    @property
    def num_clients(self):
        """Get number of clients"""
        ...
    
    @property
    def data_store(self): # -> dict[Unknown, Unknown]:
        """Get data store"""
        ...
    
    @property
    def part_policy(self): # -> dict[Unknown, Unknown]:
        """Get part policy"""
        ...
    
    @property
    def part_id(self):
        """Get part ID"""
        ...
    
    @property
    def push_handlers(self): # -> dict[Unknown, Unknown]:
        """Get push handler"""
        ...
    
    @property
    def pull_handlers(self): # -> dict[Unknown, Unknown]:
        """Get pull handler"""
        ...
    
    def is_backup_server(self): # -> bool:
        """Return True if current server is a backup server.
        """
        ...
    
    def add_part_policy(self, policy): # -> None:
        """Add partition policy to kvserver.

        Parameters
        ----------
        policy : PartitionPolicy
            Store the partition information
        """
        ...
    
    def init_data(self, name, policy_str, data_tensor=...): # -> None:
        """Init data tensor on kvserver.

        Parameters
        ----------
        name : str
            data name
        policy_str : str
            partition-policy string, e.g., 'edge' or 'node'.
        data_tensor : tensor
            If the data_tensor is None, KVServer will
            read shared-memory when client invoking get_shared_data().
        """
        ...
    
    def find_policy(self, policy_str):
        """Find a partition policy from existing policy set

        Parameters
        ----------
        policy_str : str
            partition-policy string, e.g., 'edge' or 'node'.
        """
        ...
    
    def count_local_nonzero(self, name):
        """Count nonzero in local data

        Parameters
        ----------
        name : str
            data name.

        Returns
        -------
        int
            the number of nonzero in local data.
        """
        ...
    


class KVClient:
    """KVClient is used to push/pull data to/from KVServer. If the
    target kvclient and kvserver are in the same machine, they can
    communicate with each other using local shared-memory
    automatically, instead of going through the tcp/ip RPC.

    DO NOT use KVClient in multi-threads because this behavior is
    not defined. For now, KVClient can only support CPU-to-CPU communication.
    We may support GPU-communication in the future.

    Parameters
    ----------
    ip_config : str
        Path of IP configuration file.
    num_servers : int
        Server count on each machine.
    role : str
        We can set different role for kvstore.
    """
    def __init__(self, ip_config, num_servers, role=...) -> None:
        ...
    
    @property
    def all_possible_part_policy(self): # -> dict[Unknown, Unknown]:
        """Get all possible partition policies"""
        ...
    
    @property
    def client_id(self):
        """Get client ID"""
        ...
    
    @property
    def role(self): # -> Unknown:
        """Get client role"""
        ...
    
    @property
    def machine_id(self):
        """Get machine ID"""
        ...
    
    @property
    def num_servers(self): # -> int:
        """Get the number of servers"""
        ...
    
    def barrier(self): # -> None:
        """Barrier for all client nodes.

        This API will be blocked untill all the clients invoke this API.
        """
        ...
    
    def register_push_handler(self, name, func): # -> None:
        """Register UDF push function.

        This UDF is triggered for every push. The signature of the UDF is

        ```
        def push_handler(data_store, name, local_offset, data)
        ```

        ``data_store`` is a dict that contains all tensors in the kvstore. ``name`` is the name
        of the tensor where new data is pushed to. ``local_offset`` is the offset where new
        data should be written in the tensor in the local partition. ``data`` is the new data
        to be written.

        Parameters
        ----------
        name : str
            The name of the tensor
        func : callable
            The function to be called.
        """
        ...
    
    def register_pull_handler(self, name, func): # -> None:
        """Register UDF pull function.

        This UDF is triggered for every pull. The signature of the UDF is

        ```
        def pull_handler(data_store, name, local_offset)
        ```

        ``data_store`` is a dict that contains all tensors in the kvstore. ``name`` is the name
        of the tensor where new data is pushed to. ``local_offset`` is the offset where new
        data should be written in the tensor in the local partition.

        Parameters
        ----------
        name : str
            The name of the tensor
        func : callable
            The function to be called.
        """
        ...
    
    def init_data(self, name, shape, dtype, part_policy, init_func, is_gdata=...): # -> None:
        """Send message to kvserver to initialize new data tensor and mapping this
        data from server side to client side.

        Parameters
        ----------
        name : str
            data name
        shape : list or tuple of int
            data shape
        dtype : dtype
            data type
        part_policy : PartitionPolicy
            partition policy.
        init_func : func
            UDF init function
        is_gdata : bool
            Whether the created tensor is a ndata/edata or not.
        """
        ...
    
    def delete_data(self, name): # -> None:
        """Send message to kvserver to delete tensor and clear the meta data

        Parameters
        ----------
        name : str
            data name
        """
        ...
    
    def map_shared_data(self, partition_book):
        """Mapping shared-memory tensor from server to client.

        Parameters
        ----------
        partition_book : GraphPartitionBook
            Store the partition information
        """
        ...
    
    def gdata_name_list(self): # -> list[Unknown]:
        """Get all the graph data name"""
        ...
    
    def data_name_list(self): # -> list[Unknown]:
        """Get all the data name"""
        ...
    
    def get_data_meta(self, name): # -> tuple[Unknown, Unknown, Unknown]:
        """Get meta data (data_type, data_shape, partition_policy)
        """
        ...
    
    def get_partid(self, name, id_tensor):
        """
        Parameters
        ----------
        name : str
            data name
        id_tensor : tensor
            a vector storing the global data ID
        """
        ...
    
    def push(self, name, id_tensor, data_tensor): # -> None:
        """Push data to KVServer.

        Note that, the push() is an non-blocking operation that will return immediately.

        Parameters
        ----------
        name : str
            data name
        id_tensor : tensor
            a vector storing the global data ID
        data_tensor : tensor
            a tensor with the same row size of data ID
        """
        ...
    
    def pull(self, name, id_tensor):
        """Pull message from KVServer.

        Parameters
        ----------
        name : str
            data name
        id_tensor : tensor
            a vector storing the ID list

        Returns
        -------
        tensor
            a data tensor with the same row size of id_tensor.
        """
        ...
    
    def count_nonzero(self, name): # -> Literal[0]:
        """Count nonzero value by pull request from KVServers.

        Parameters
        ----------
        name : str
            data name

        Returns
        -------
        int
            the number of nonzero in this data.
        """
        ...
    


KVCLIENT = ...
def init_kvstore(ip_config, num_servers, role): # -> None:
    """initialize KVStore"""
    ...

def close_kvstore(): # -> None:
    """Close the current KVClient"""
    ...

def get_kvstore(): # -> None:
    """get the KVClient"""
    ...

