"""
This type stub file was generated by pyright.
"""

import ctypes

"""Function namespace."""
IMPORT_EXCEPT = ...
FunctionHandle = ctypes.c_void_p
class Function(_FunctionBase):
    """The PackedFunc object.

    Function plays an key role to bridge front and backend in DGL.
    Function provide a type-erased interface, you can call function with positional arguments.

    The compiled module returns Function.
    DGL backend also registers and exposes its API as Functions.
    For example, the developer function exposed in dgl.ir_pass are actually
    C++ functions that are registered as PackedFunc

    The following are list of common usage scenario of dgl.Function.

    - Automatic exposure of C++ API into python
    - To call PackedFunc from python side
    - To call python callbacks to inspect results in generated code
    - Bring python hook into C++ backend

    See Also
    --------
    dgl.register_func: How to register global function.
    dgl.get_global_func: How to get global function.
    """
    ...


class ModuleBase:
    """Base class for module"""
    __slots__ = ...
    def __init__(self, handle) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    @property
    def entry_func(self): # -> Function:
        """Get the entry function

        Returns
        -------
        f : Function
            The entry function if exist
        """
        ...
    
    def get_function(self, name, query_imports=...): # -> Function:
        """Get function from the module.

        Parameters
        ----------
        name : str
            The name of the function

        query_imports : bool
            Whether also query modules imported by this module.

        Returns
        -------
        f : Function
            The result function.
        """
        ...
    
    def import_module(self, module): # -> None:
        """Add module to the import list of current one.

        Parameters
        ----------
        module : Module
            The other module.
        """
        ...
    
    def __getitem__(self, name): # -> Function:
        ...
    
    def __call__(self, *args):
        ...
    


def register_func(func_name, f=..., override=...): # -> Function | (myf: Unknown) -> (Unknown | Function):
    """Register global function

    Parameters
    ----------
    func_name : str or function
        The function name

    f : function, optional
        The function to be registered.

    override: boolean optional
        Whether override existing entry.

    Returns
    -------
    fregister : function
        Register function if f is not specified.

    Examples
    --------
    The following code registers my_packed_func as global function.
    Note that we simply get it back from global function table to invoke
    it from python side. However, we can also invoke the same function
    from C++ backend, or in the compiled DGL code.

    .. code-block:: python

      targs = (10, 10.0, "hello")
      @dgl.register_func
      def my_packed_func(*args):
          assert(tuple(args) == targs)
          return 10
      # Get it out from global function table
      f = dgl.get_global_func("my_packed_func")
      assert isinstance(f, dgl.nd.Function)
      y = f(*targs)
      assert y == 10
    """
    ...

def get_global_func(name, allow_missing=...): # -> Function | None:
    """Get a global function by name

    Parameters
    ----------
    name : str
        The name of the global function

    allow_missing : bool
        Whether allow missing function or raise an error.

    Returns
    -------
    func : dgl.Function
        The function to be returned, None if function is missing.
    """
    ...

def list_global_func_names(): # -> list[Unknown]:
    """Get list of global functions registered.

    Returns
    -------
    names : list
       List of global functions names.
    """
    ...

def extract_ext_funcs(finit): # -> dict[Unknown, Unknown]:
    """
    Extract the extension PackedFuncs from a C module.

    Parameters
    ----------
    finit : ctypes function
        a ctypes that takes signature of DGLExtensionDeclarer

    Returns
    -------
    fdict : dict of str to Function
        The extracted functions
    """
    ...

