"""
This type stub file was generated by pyright.
"""

import ctypes

"""Common runtime ctypes."""
dgl_shape_index_t = ctypes.c_int64
class TypeCode:
    """Type code used in API calls"""
    INT = ...
    UINT = ...
    FLOAT = ...
    HANDLE = ...
    NULL = ...
    DGL_TYPE = ...
    DGL_CONTEXT = ...
    ARRAY_HANDLE = ...
    OBJECT_HANDLE = ...
    MODULE_HANDLE = ...
    FUNC_HANDLE = ...
    STR = ...
    BYTES = ...
    NDARRAY_CONTAINER = ...
    EXT_BEGIN = ...


class DGLByteArray(ctypes.Structure):
    """Temp data structure for byte array."""
    _fields_ = ...


class DGLType(ctypes.Structure):
    """DGL datatype structure"""
    _fields_ = ...
    CODE2STR = ...
    _cache = ...
    def __new__(cls, type_str): # -> DGLType:
        ...
    
    def __init__(self, type_str) -> None:
        ...
    
    def __repr__(self): # -> Any | str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    


RPC_SESS_MASK = ...
class DGLContext(ctypes.Structure):
    """DGL context strucure."""
    _fields_ = ...
    MASK2STR = ...
    STR2MASK = ...
    _cache = ...
    def __new__(cls, device_type, device_id): # -> DGLContext:
        ...
    
    def __init__(self, device_type, device_id) -> None:
        ...
    
    @property
    def exist(self):
        """Whether this device exist."""
        ...
    
    @property
    def max_threads_per_block(self):
        """Maximum number of threads on each block."""
        ...
    
    @property
    def warp_size(self):
        """Number of threads that executes in concurrent."""
        ...
    
    @property
    def max_shared_memory_per_block(self):
        """Total amount of shared memory per block in bytes."""
        ...
    
    @property
    def compute_version(self):
        """Get compute verison number in string.

        Currently used to get compute capability of CUDA device.

        Returns
        -------
        version : str
            The version string in `major.minor` format.
        """
        ...
    
    @property
    def device_name(self):
        """Return the string name of device."""
        ...
    
    @property
    def max_clock_rate(self):
        """Return the max clock frequency of device."""
        ...
    
    @property
    def multi_processor_count(self):
        """Return the number of compute units of device."""
        ...
    
    @property
    def max_thread_dimensions(self): # -> Any:
        """Return the maximum size of each thread axis

        Returns
        -------
        dims: List of int
            The maximum length of threadIdx.x, threadIdx.y, threadIdx.z
        """
        ...
    
    def sync(self): # -> None:
        """Synchronize until jobs finished at the context."""
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __hash__(self) -> int:
        ...
    


class DGLArray(ctypes.Structure):
    """DGLValue in C API"""
    _fields_ = ...


DGLArrayHandle = ...
