"""
This type stub file was generated by pyright.
"""

import sys

"""ctypes library and helper functions """
if sys.version_info[0] == 3:
    string_types = ...
    numeric_types = ...
    py_str = ...
else:
    ...
class DGLError(Exception):
    """Error thrown by DGL function"""
    ...


__version__ = ...
_FFI_MODE = ...
def check_call(ret): # -> None:
    """Check the return value of C API call

    This function will raise exception when error occurs.
    Wrap every API call with this function

    Parameters
    ----------
    ret : int
        return value from API calls
    """
    ...

def c_str(string): # -> c_char_p:
    """Create ctypes char * from a python string
    Parameters
    ----------
    string : string type
        python string

    Returns
    -------
    str : c_char_p
        A char pointer that can be passed to C API
    """
    ...

def c_array(ctype, values):
    """Create ctypes array from a python array

    Parameters
    ----------
    ctype : ctypes data type
        data type of the array we want to convert to

    values : tuple or list
        data content

    Returns
    -------
    out : ctypes array
        Created ctypes array
    """
    ...

def decorate(func, fwrapped):
    """A wrapper call of decorator package, differs to call time

    Parameters
    ----------
    func : function
        The original function

    fwrapped : function
        The wrapped function
    """
    ...

tensor_adapter_loaded = ...
def load_tensor_adapter(backend, version): # -> None:
    """Tell DGL to load a tensoradapter library for given backend and version.

    Parameters
    ----------
    backend : str
        The backend (currently ``pytorch``, ``mxnet`` or ``tensorflow``).
    version : str
        The version number of the backend.
    """
    ...

