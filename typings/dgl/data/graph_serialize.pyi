"""
This type stub file was generated by pyright.
"""

from .._ffi.object import ObjectBase, register_object

"""For Graph Serialization"""
__all__ = ['save_graphs', "load_graphs", "load_labels"]
@register_object("graph_serialize.StorageMetaData")
class StorageMetaData(ObjectBase):
    """StorageMetaData Object
    attributes available:
      num_graph [int]: return numbers of graphs
      nodes_num_list Value of NDArray: return number of nodes for each graph
      edges_num_list Value of NDArray: return number of edges for each graph
      labels [dict of backend tensors]: return dict of labels
      graph_data [list of GraphData]: return list of GraphData Object
    """
    ...


def is_local_path(filepath): # -> bool:
    ...

def check_local_file_exists(filename): # -> None:
    ...

@register_object("graph_serialize.GraphData")
class GraphData(ObjectBase):
    """GraphData Object"""
    @staticmethod
    def create(g):
        """Create GraphData"""
        ...
    
    def get_graph(self): # -> DGLHeteroGraph:
        """Get DGLHeteroGraph from GraphData"""
        ...
    


def save_graphs(filename, g_list, labels=...): # -> None:
    r"""Save graphs and optionally their labels to file.

    Besides saving to local files, DGL supports writing the graphs directly
    to S3 (by providing a ``"s3://..."`` path) or to HDFS (by providing
    ``"hdfs://..."`` a path).

    The function saves both the graph structure and node/edge features to file
    in DGL's own binary format. For graph-level features, pass them via
    the :attr:`labels` argument.

    Parameters
    ----------
    filename : str
        The file name to store the graphs and labels.
    g_list: list
        The graphs to be saved.
    labels: dict[str, Tensor]
        labels should be dict of tensors, with str as keys

    Examples
    ----------
    >>> import dgl
    >>> import torch as th

    Create :class:`DGLGraph` objects and initialize node
    and edge features.

    >>> g1 = dgl.graph(([0, 1, 2], [1, 2, 3]))
    >>> g2 = dgl.graph(([0, 2], [2, 3]))
    >>> g2.edata["e"] = th.ones(2, 4)

    Save Graphs into file

    >>> from dgl.data.utils import save_graphs
    >>> graph_labels = {"glabel": th.tensor([0, 1])}
    >>> save_graphs("./data.bin", [g1, g2], graph_labels)

    See Also
    --------
    load_graphs
    """
    ...

def load_graphs(filename, idx_list=...): # -> tuple[list[Unknown], dict[Unknown, Unknown]]:
    """Load graphs and optionally their labels from file saved by :func:`save_graphs`.

    Besides loading from local files, DGL supports loading the graphs directly
    from S3 (by providing a ``"s3://..."`` path) or from HDFS (by providing
    ``"hdfs://..."`` a path).

    Parameters
    ----------
    filename: str
        The file name to load graphs from.
    idx_list: list[int], optional
        The indices of the graphs to be loaded if the file contains multiple graphs.
        Default is loading all the graphs stored in the file.

    Returns
    --------
    graph_list: list[DGLGraph]
        The loaded graphs.
    labels: dict[str, Tensor]
        The graph labels stored in file. If no label is stored, the dictionary is empty.
        Regardless of whether the ``idx_list`` argument is given or not,
        the returned dictionary always contains the labels of all the graphs.

    Examples
    ----------
    Following the example in :func:`save_graphs`.

    >>> from dgl.data.utils import load_graphs
    >>> glist, label_dict = load_graphs("./data.bin") # glist will be [g1, g2]
    >>> glist, label_dict = load_graphs("./data.bin", [0]) # glist will be [g1]

    See Also
    --------
    save_graphs
    """
    ...

def load_graph_v2(filename, idx_list=...): # -> tuple[list[Unknown], dict[Unknown, Unknown]]:
    """Internal functions for loading DGLHeteroGraphs."""
    ...

def load_graph_v1(filename, idx_list=...): # -> tuple[list[Unknown], dict[Unknown, Unknown]]:
    """"Internal functions for loading DGLGraphs (V0)."""
    ...

def load_labels(filename): # -> dict[Unknown, Unknown]:
    """
    Load label dict from file

    Parameters
    ----------
    filename: str
        filename to load DGLGraphs

    Returns
    ----------
    labels: dict
        dict of labels stored in file (empty dict returned if no
        label stored)

    Examples
    ----------
    Following the example in save_graphs.

    >>> from dgl.data.utils import load_labels
    >>> label_dict = load_graphs("./data.bin")

    """
    ...

def load_labels_v2(filename): # -> dict[Unknown, Unknown]:
    """Internal functions for loading labels from V2 format"""
    ...

def load_labels_v1(filename): # -> dict[Unknown, Unknown]:
    """Internal functions for loading labels from V1 format"""
    ...

