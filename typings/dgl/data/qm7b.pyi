"""
This type stub file was generated by pyright.
"""

from .dgl_dataset import DGLDataset

"""QM7b dataset for graph property prediction (regression)."""
class QM7bDataset(DGLDataset):
    r"""QM7b dataset for graph property prediction (regression)

    This dataset consists of 7,211 molecules with 14 regression targets.
    Nodes means atoms and edges means bonds. Edge data 'h' means
    the entry of Coulomb matrix.

    Reference: `<http://quantum-machine.org/datasets/>`_

    Statistics:

    - Number of graphs: 7,211
    - Number of regression targets: 14
    - Average number of nodes: 15
    - Average number of edges: 245
    - Edge feature size: 1

    Parameters
    ----------
    raw_dir : str
        Raw file directory to download/contains the input data directory.
        Default: ~/.dgl/
    force_reload : bool
        Whether to reload the dataset. Default: False
    verbose: bool
        Whether to print out progress information. Default: True.

    Attributes
    ----------
    num_labels : int
        Number of labels for each graph, i.e. number of prediction tasks

    Raises
    ------
    UserWarning
        If the raw data is changed in the remote server by the author.

    Examples
    --------
    >>> data = QM7bDataset()
    >>> data.num_labels
    14
    >>>
    >>> # iterate over the dataset
    >>> for g, label in data:
    ...     edge_feat = g.edata['h']  # get edge feature
    ...     # your code here...
    ...
    >>>
    """
    _url = ...
    _sha1_str = ...
    def __init__(self, raw_dir=..., force_reload=..., verbose=...) -> None:
        ...
    
    def process(self): # -> None:
        ...
    
    def save(self): # -> None:
        """save the graph list and the labels"""
        ...
    
    def has_cache(self): # -> bool:
        ...
    
    def load(self): # -> None:
        ...
    
    def download(self): # -> None:
        ...
    
    @property
    def num_labels(self): # -> Literal[14]:
        """Number of labels for each graph, i.e. number of prediction tasks."""
        ...
    
    def __getitem__(self, idx): # -> tuple[Unknown, Unknown]:
        r""" Get graph and label by index

        Parameters
        ----------
        idx : int
            Item index

        Returns
        -------
        (:class:`dgl.DGLGraph`, Tensor)
        """
        ...
    
    def __len__(self): # -> int:
        r"""Number of graphs in the dataset.

        Return
        -------
        int
        """
        ...
    


QM7b = QM7bDataset
