"""
This type stub file was generated by pyright.
"""

from ._ffi.object import ObjectBase, register_object
from ._ffi.ndarray import NDArrayBase

"""DGL Runtime NDArray API.

dgl.ndarray provides a minimum runtime array structure to be
used with C++ library.
"""
class NDArray(NDArrayBase):
    """Lightweight NDArray class for DGL framework."""
    def __len__(self): # -> Any:
        ...
    
    def shared_memory(self, name):
        """Return a copy of the ndarray in shared memory

        Parameters
        ----------
        name : str
            The name of the shared memory

        Returns
        -------
        NDArray
        """
        ...
    


def cpu(dev_id=...): # -> DGLContext:
    """Construct a CPU device

    Parameters
    ----------
    dev_id : int, optional
        The integer device id

    Returns
    -------
    ctx : DGLContext
        The created context
    """
    ...

def gpu(dev_id=...): # -> DGLContext:
    """Construct a CPU device

    Parameters
    ----------
    dev_id : int, optional
        The integer device id

    Returns
    -------
    ctx : DGLContext
        The created context
    """
    ...

def array(arr, ctx=...):
    """Create an array from source arr.

    Parameters
    ----------
    arr : numpy.ndarray
        The array to be copied from

    ctx : DGLContext, optional
        The device context to create the array

    Returns
    -------
    ret : NDArray
        The created array
    """
    ...

def zerocopy_from_numpy(np_data): # -> NDArray:
    """Create an array that shares the given numpy data.

    Parameters
    ----------
    np_data : numpy.ndarray
        The numpy data

    Returns
    -------
    NDArray
        The array
    """
    ...

def cast_to_signed(arr):
    """Cast this NDArray from unsigned integer to signed one.

    uint64 -> int64
    uint32 -> int32

    Useful for backends with poor signed integer support (e.g., TensorFlow).

    Parameters
    ----------
    arr : NDArray
        Input array

    Returns
    -------
    NDArray
        Cased array
    """
    ...

def exist_shared_mem_array(name):
    """ Check the existence of shared-memory array.

    Parameters
    ----------
    name : str
        The name of the shared-memory array.

    Returns
    -------
    bool
        The existence of the array
    """
    ...

class SparseFormat:
    """Format code"""
    ANY = ...
    COO = ...
    CSR = ...
    CSC = ...
    FORMAT2STR = ...


@register_object('aten.SparseMatrix')
class SparseMatrix(ObjectBase):
    """Sparse matrix object class in C++ backend."""
    @property
    def format(self):
        """Sparse format enum

        Returns
        -------
        int
        """
        ...
    
    @property
    def num_rows(self):
        """Number of rows.

        Returns
        -------
        int
        """
        ...
    
    @property
    def num_cols(self):
        """Number of rows.

        Returns
        -------
        int
        """
        ...
    
    @property
    def indices(self): # -> list[Unknown]:
        """Index arrays.

        Returns
        -------
        list of ndarrays
        """
        ...
    
    @property
    def flags(self):
        """Flag arrays

        Returns
        -------
        list of boolean
        """
        ...
    
    def __getstate__(self): # -> tuple[Unknown, Unknown, Unknown, list[Unknown], Unknown]:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


NULL = ...
