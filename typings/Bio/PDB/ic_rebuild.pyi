"""
This type stub file was generated by pyright.
"""

from Bio.PDB.Structure import Structure
from typing import Any, Dict, Union
from Bio.PDB.Residue import Residue
from Bio.PDB.Model import Model
from Bio.PDB.Chain import Chain

"""Convert XYZ Structure to internal coordinates and back, test result."""
def structure_rebuild_test(entity, verbose: bool = ...) -> Dict:
    """Test rebuild PDB structure from internal coordinates.

    :param entity: Biopython Structure, Model or Chain
        Structure to test
    :param verbose: bool
        print extra messages
    :returns: dict
        comparison dict from compare_residues()
    """
    ...

def report_IC(entity: Union[Structure, Model, Chain, Residue], reportDict: Dict[str, Any] = ..., verbose: bool = ...) -> Dict[str, Any]:
    """Generate dict with counts of ic data elements for each entity level.

    reportDict entries are:
        - idcode : PDB ID
        - hdr : PDB header lines
        - mdl : models
        - chn : chains
        - res : residue objects
        - res_e : residues with dihedra and/or hedra
        - dih : dihedra
        - hed : hedra

    :param Entity entity: Biopython PDB Entity object: S, M, C or R
    :raises PDBException: if entity level not S, M, C, or R
    :raises Exception: if entity does not have .level attribute
    :returns: dict with counts of IC data elements
    """
    ...

def IC_duplicate(entity) -> Structure:
    """Duplicate structure entity with IC data, no atom coordinates.

    Employs write_PIC(), read_PIC() with StringIO buffer.
    Calls atom_to_internal_coordinates() if needed.

    :param entity: Biopython PDB Entity (will fail for Atom)
    :returns: Biopython PDBStructure, no Atom objects
    """
    ...

def compare_residues(e0: Union[Structure, Model, Chain], e1: Union[Structure, Model, Chain], verbose: bool = ...) -> Dict[str, Any]:
    """Compare full IDs and atom coordinates for 2 Biopython PDB entities.

    Skip DNA and HETATMs.

    :param e0, e1: Biopython PDB Entity objects (S, M or C)
        Structures, Models or Chains to be compared
    :param verbose: Bool
        whether to print mismatch info, default False
    :returns: Dictionary
        Result counts for Residues, Full ID match Residues, Atoms,
        Full ID match atoms, and Coordinate match atoms; report string;
        error status (bool)
    """
    ...

def write_PDB(entity: Structure, file: str, pdbid: str = ..., chainid: str = ...) -> None:
    """Write PDB file with HEADER and TITLE."""
    ...

