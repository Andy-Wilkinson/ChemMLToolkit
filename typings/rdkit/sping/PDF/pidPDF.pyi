"""
This type stub file was generated by pyright.
"""

from rdkit.sping.pid import *

"""This is the PIDDLE back end for PDF.  It acts as a wrapper
over the pdfgen.Canvas class, and translates between the
PIDDLE graphics state and the PDF/PostScript one. It only
exposes PIDDLE methods; however, it has an attribute
self.pdf which offers numerous lower-level drawing routines.
"""
DEFAULT_PAGE_SIZE = ...
font_face_map = ...
ps_font_map = ...
class PDFCanvas(Canvas):
    """This works by accumulating a list of strings containing
      PDF page marking operators, as you call its methods.  We could
      use a big string but this is more efficient - only concatenate
      it once, with control over line ends.  When
      done, it hands off the stream to a PDFPage object."""
    def __init__(self, size=..., name=..., pagesize=...) -> None:
        ...
    
    def showPage(self): # -> None:
        """ensure basic settings are the same after a page break"""
        ...
    
    def isInteractive(self): # -> Literal[0]:
        ...
    
    def canUpdate(self): # -> Literal[0]:
        ...
    
    def clear(self): # -> None:
        "Not wll defined for file formats, use same as ShowPage"
        ...
    
    def flush(self): # -> None:
        ...
    
    def save(self, file=..., format=...): # -> None:
        """Saves the file.  If holding data, do
            a showPage() to save them having to."""
        ...
    
    def setInfoLine(self, s): # -> None:
        ...
    
    def __setattr__(self, key, value): # -> None:
        ...
    
    def resetDefaults(self): # -> None:
        """If you drop down to a lower level, PIDDLE can lose
            track of the current graphics state.  Calling this after
            wards ensures that the canvas is updated to the same
            defaults as PIDDLE thinks they should be."""
        ...
    
    def stringWidth(self, s, font=...):
        "Return the logical width of the string if it were drawn \
            in the current font (defaults to self.font)."
        ...
    
    def fontHeight(self, font=...):
        ...
    
    def fontAscent(self, font=...):
        ...
    
    def fontDescent(self, font=...):
        ...
    
    def drawLine(self, x1, y1, x2, y2, color=..., width=..., dash=..., **kwargs): # -> None:
        """Calls the underlying methods in pdfgen.canvas.  For the
            highest performance, use canvas.setDefaultFont and
            canvas.setLineWidth, and draw batches of similar
            lines together."""
        ...
    
    def drawLines(self, lineList, color=..., width=..., dash=..., **kwargs): # -> None:
        """Draws several distinct lines, all with same color
            and width, efficiently"""
        ...
    
    def drawString(self, s, x, y, font=..., color=..., angle=..., **kwargs): # -> None:
        """As it says, but many options to process.  It translates
            user space rather than text space, in case underlining is
            needed on rotated text.  It cheats and does literals
            for efficiency, avoiding changing the python graphics state."""
        ...
    
    def drawCurve(self, x1, y1, x2, y2, x3, y3, x4, y4, edgeColor=..., edgeWidth=..., fillColor=..., closed=..., dash=..., **kwargs): # -> None:
        """This could do two totally different things.  If not closed,
            just does a bezier curve so fill is irrelevant.  If closed,
            it is actually a filled shape."""
        ...
    
    def drawRect(self, x1, y1, x2, y2, edgeColor=..., edgeWidth=..., fillColor=..., dash=..., **kwargs): # -> None:
        ...
    
    def drawEllipse(self, x1, y1, x2, y2, edgeColor=..., edgeWidth=..., fillColor=..., dash=..., **kwargs): # -> None:
        ...
    
    def drawArc(self, x1, y1, x2, y2, startAng=..., extent=..., edgeColor=..., edgeWidth=..., fillColor=..., dash=..., **kwargs): # -> None:
        """This draws a PacMan-type shape connected to the centre.  One
            idiosyncrasy - if you specify an edge color, it apples to the
            outer curved rim but not the radial edges."""
        ...
    
    def drawPolygon(self, pointlist, edgeColor=..., edgeWidth=..., fillColor=..., closed=..., dash=..., **kwargs): # -> None:
        """As it says.  Easy with paths!"""
        ...
    
    def drawImage(self, image, x1, y1, x2=..., y2=..., **kwargs): # -> None:
        """Draw a PIL Image or image filename into the specified rectangle.
            If x2 and y2 are omitted, they are calculated from the image size.
            """
        ...
    
    def drawLiteral(self, literal): # -> None:
        ...
    


def test(): # -> None:
    ...

if __name__ == '__main__':
    ...
