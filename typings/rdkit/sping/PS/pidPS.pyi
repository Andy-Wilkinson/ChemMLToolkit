"""
This type stub file was generated by pyright.
"""

from rdkit.sping.pid import *

"""
piddlePS - a PostScript backend for the PIDDLE drawing module

   Magnus Lie Hetland

   1999
"""
class PostScriptLevelException(ValueError):
  ...


linesep = ...
PiddleLegalFonts = ...
Roman = ...
Bold = ...
Italic = ...
PSFontMapStdEnc = ...
PSFontMapLatin1Enc = ...
def latin1FontEncoding(fontname): # -> str:
  """use this to generating PS code for re-encoding a font as ISOLatin1
    from font with name 'fontname' defines reencoded font, 'fontname-ISOLatin1'"""
  ...

def dashLineDefinition(): # -> Literal['''
%% This is hacked straight out of the Blue book (from Adobe)
/centerdash
  { /pattern exch def
    /pathlen pathlength def
    /patternlength 0 def
    pattern
      { patternlength add /patternlength exch def
      } forall
    pattern length 2 mod 0 ne
      { /patternlength patternlength 2 mul def } if
    /first pattern 0 get def
    /last patternlength first sub def
    /n pathlen last sub cvi patternlength idiv def
    /endpart pathlen patternlength n mul sub
       last sub 2 div def
    /offset first endpart sub def
    pattern offset setdash
  } def

/pathlength
    { flattenpath
      /dist 0 def

      { /yfirst exch def /xfirst exch def
        /ymoveto yfirst def /xmoveto xfirst def }
      { /ynext exch def /xnext exch def
        /dist dist ynext yfirst sub dup mul
          xnext xfirst sub dup mul add sqrt add def
        /yfirst ynext def /xfirst xnext def }
      {}

      { /ynext ymoveto def /xnext xmoveto def
        /dist dist ynext yfirst sub dup mul
          xnext xfirst sub dup mul add sqrt add def
        /yfirst ynext def /xfirst xnext def }
      pathforall
      dist
    } def
''']:
  ...

class PsDSC:
  def __init__(self) -> None:
    ...
  
  def documentHeader(self): # -> Literal['%!PS-Adobe-3.0']:
    ...
  
  def boundingBoxStr(self, x0, y0, x1, y1): # -> str:
    "coordinates of bbox in default PS coordinates"
    ...
  
  def BeginPageStr(self, pageSetupStr, pageName=...):
    """Use this at the beginning of each page, feed it your setup code
        in the form of a string of postscript.  pageName is the "number" of the
        page.  By default it will be 0."""
    ...
  
  def EndPageStr(self): # -> Literal['']:
    ...
  


class EpsDSC(PsDSC):
  def __init__(self) -> None:
    ...
  
  def documentHeader(self): # -> Literal['%!PS-Adobe-3.0 EPSF-3.0']:
    ...
  


class PSCanvas(Canvas):
  """This canvas is meant for generating encapsulated PostScript files
    (EPS) used for inclusion in other documents; thus really only
    single-page documents are supported.  For historical reasons and
    because they can be printed (a showpage is included), the files are
    given a .ps extension by default, and a primitive sort of multipage
    document can be generated using nextPage() or clear().  Use at your own
    risk!  Future versions of piddlePS will include an EPSCanvas and a
    PSCanvas which will clearly delineate between single and multipage
    documents.

    Note: All font encodings must be taken care in __init__, you can't add
          more after this"""
  def __init__(self, size=..., name=..., PostScriptLevel=..., fontMapEncoding=...) -> None:
    ...
  
  def psBeginDocument(self): # -> None:
    ...
  
  def psEndDocument(self): # -> None:
    ...
  
  def psBeginPage(self, pageName=...): # -> None:
    ...
  
  def psEndPage(self): # -> None:
    ...
  
  def nextPage(self): # -> None:
    ...
  
  def clear(self): # -> None:
    """clear resets the canvas to it's default state.  Though this
        canvas is really only meant to be an EPS canvas, i.e., single page,
        for historical reasons we will allow multipage documents.  Thus
        clear will end the page, clear the canvas state back to default,
        and start a new page.  In the future, this PSCanvas will become
        EPSCanvas and will not support multipage documents.  In that case,
        the canvas will be reset to its default state and the file will be
        emptied of all previous drawing commands"""
    ...
  
  def resetToDefaults(self): # -> None:
    ...
  
  def flush(self): # -> None:
    ...
  
  def save(self, file=..., format=...): # -> None:
    """Write the current document to a file or stream and close the file
        Computes any final trailers, etc. that need to be done in order to
        produce a well formed postscript file.  At least for now though,
        it still allows you to add to the file after a save by not actually
        inserting the finalization code into self.code

        the format argument is not used"""
    ...
  
  def stringWidth(self, s, font=...):
    "Return the logical width of the string if it were drawn \
        in the current font (defaults to self.font)."
    ...
  
  def fontAscent(self, font=...):
    ...
  
  def fontDescent(self, font=...):
    ...
  
  def drawLine(self, x1, y1, x2, y2, color=..., width=..., dash=..., **kwargs): # -> None:
    ...
  
  def drawLines(self, lineList, color=..., width=..., dash=..., **kwargs): # -> None:
    ...
  
  def drawString(self, s, x, y, font=..., color=..., angle=..., **kwargs): # -> None:
    """drawString(self, s, x, y, font=None, color=None, angle=0)
        draw a string s at position x,y"""
    ...
  
  def drawCurve(self, x1, y1, x2, y2, x3, y3, x4, y4, edgeColor=..., edgeWidth=..., fillColor=..., closed=..., dash=..., **kwargs): # -> None:
    ...
  
  def drawRoundRect(self, x1, y1, x2, y2, rx=..., ry=..., edgeColor=..., edgeWidth=..., fillColor=..., dash=..., **kwargs): # -> None:
    "Draw a rounded rectangle between x1,y1, and x2,y2, \
        with corners inset as ellipses with x radius rx and y radius ry. \
        These should have x1<x2, y1<y2, rx>0, and ry>0."
    ...
  
  def drawEllipse(self, x1, y1, x2, y2, edgeColor=..., edgeWidth=..., fillColor=..., dash=..., **kwargs): # -> None:
    "Draw an orthogonal ellipse inscribed within the rectangle x1,y1,x2,y2. \
        These should have x1<x2 and y1<y2."
    ...
  
  def drawArc(self, x1, y1, x2, y2, startAng=..., extent=..., edgeColor=..., edgeWidth=..., fillColor=..., dash=..., **kwargs): # -> None:
    "Draw a partial ellipse inscribed within the rectangle x1,y1,x2,y2, \
        starting at startAng degrees and covering extent degrees.   Angles \
        start with 0 to the right (+x) and increase counter-clockwise. \
        These should have x1<x2 and y1<y2."
    ...
  
  def drawPolygon(self, pointlist, edgeColor=..., edgeWidth=..., fillColor=..., closed=..., dash=..., **kwargs): # -> None:
    ...
  
  def drawFigure(self, partList, edgeColor=..., edgeWidth=..., fillColor=..., closed=..., dash=..., **kwargs): # -> None:
    ...
  


