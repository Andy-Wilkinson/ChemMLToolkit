"""
This type stub file was generated by pyright.
"""

_descList = ...
MolWt = ...
def HeavyAtomMolWt(x):
  ...

ExactMolWt = ...
def NumValenceElectrons(mol): # -> int:
  """ The number of valence electrons the molecule has

    >>> NumValenceElectrons(Chem.MolFromSmiles('CC'))
    14
    >>> NumValenceElectrons(Chem.MolFromSmiles('C(=O)O'))
    18
    >>> NumValenceElectrons(Chem.MolFromSmiles('C(=O)[O-]'))
    18
    >>> NumValenceElectrons(Chem.MolFromSmiles('C(=O)'))
    12

    """
  ...

def NumRadicalElectrons(mol): # -> int:
  """ The number of radical electrons the molecule has
      (says nothing about spin state)

    >>> NumRadicalElectrons(Chem.MolFromSmiles('CC'))
    0
    >>> NumRadicalElectrons(Chem.MolFromSmiles('C[CH3]'))
    0
    >>> NumRadicalElectrons(Chem.MolFromSmiles('C[CH2]'))
    1
    >>> NumRadicalElectrons(Chem.MolFromSmiles('C[CH]'))
    2
    >>> NumRadicalElectrons(Chem.MolFromSmiles('C[C]'))
    3

    """
  ...

def MaxPartialCharge(mol, force=...): # -> float:
  ...

def MinPartialCharge(mol, force=...): # -> float:
  ...

def MaxAbsPartialCharge(mol, force=...): # -> float:
  ...

def MinAbsPartialCharge(mol, force=...): # -> float:
  ...

def FpDensityMorgan1(x):
  ...

def FpDensityMorgan2(x):
  ...

def FpDensityMorgan3(x):
  ...

if hasattr(rdMolDescriptors, 'BCUT2D'):
  names = ...
if hasattr(rdMolDescriptors, 'CalcAUTOCORR2D'):
  names = ...
  autocorr = ...
  def setupAUTOCorrDescriptors(): # -> None:
    """Adds AUTOCORR descriptors to the default descriptor lists"""
    ...
  
class PropertyFunctor(rdMolDescriptors.PythonPropertyFunctor):
  """Creates a python based property function that can be added to the
    global property list.  To use, subclass this class and override the
    __call__ method.  Then create an instance and add it to the
    registry.  The __call__ method should return a numeric value.

    Example:

      class NumAtoms(Descriptors.PropertyFunctor):
        def __init__(self):
          Descriptors.PropertyFunctor.__init__(self, "NumAtoms", "1.0.0")
        def __call__(self, mol):
          return mol.GetNumAtoms()

      numAtoms = NumAtoms()
      rdMolDescriptors.Properties.RegisterProperty(numAtoms)
    """
  def __init__(self, name, version) -> None:
    ...
  
  def __call__(self, mol):
    ...
  


if __name__ == '__main__':
  ...
