"""
This type stub file was generated by pyright.
"""

import logging

"""
molvs.validate
~~~~~~~~~~~~~~

This module contains the main :class:`~molvs.validate.Validator` class that can be used to perform all
:class:`Validations <molvs.validations.Validation>`, as well as the :func:`~molvs.validate.validate_smiles()`
convenience function.

:copyright: Copyright 2016 by Matt Swain.
:license: MIT, see LICENSE file for more details.
"""
SIMPLE_FORMAT = ...
LONG_FORMAT = ...
class LogHandler(logging.Handler):
    """A simple logging Handler that just stores logs in an array until flushed."""
    def __init__(self) -> None:
        ...
    
    @property
    def logmessages(self): # -> list[str]:
        ...
    
    def emit(self, record): # -> None:
        """Append the record."""
        ...
    
    def flush(self): # -> None:
        """Clear the log records."""
        ...
    
    def close(self): # -> None:
        """Close the handler."""
        ...
    


class Validator:
    """The main class for running :class:`Validations <molvs.validations.Validation>` on molecules."""
    def __init__(self, validations=..., log_format=..., level=..., stdout=..., raw=...) -> None:
        """Initialize a Validator with the following parameters:

        :param validations: A list of Validations to apply (default: :data:`~molvs.validations.VALIDATIONS`).
        :param string log_format: A string format (default: :data:`~molvs.validate.SIMPLE_FORMAT`).
        :param level: The minimum logging level to output.
        :param bool stdout: Whether to send log messages to standard output.
        :param bool raw: Whether to return raw :class:`~logging.LogRecord` objects instead of formatted log strings.
        """
        ...
    
    def __call__(self, mol): # -> list[str]:
        """Calling a Validator instance like a function is the same as calling its
        :meth:`~molvs.validate.Validator.validate` method."""
        ...
    
    def validate(self, mol): # -> list[str]:
        """"""
        ...
    


def validate_smiles(smiles): # -> list[str]:
    """Return log messages for a given SMILES string using the default validations.

    Note: This is a convenience function for quickly validating a single SMILES string. It is more efficient to use
    the :class:`~molvs.validate.Validator` class directly when working with many molecules or when custom options
    are needed.

    :param string smiles: The SMILES for the molecule.
    :returns: A list of log messages.
    :rtype: list of strings.
    """
    ...

