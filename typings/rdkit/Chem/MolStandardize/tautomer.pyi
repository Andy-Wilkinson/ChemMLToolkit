"""
This type stub file was generated by pyright.
"""

from .utils import memoized_property

"""
molvs.tautomer
~~~~~~~~~~~~~~

This module contains tools for enumerating tautomers and determining a canonical tautomer.

:copyright: Copyright 2016 by Matt Swain.
:license: MIT, see LICENSE file for more details.
"""
log = ...
class TautomerTransform:
    """Rules to transform one tautomer to another.

    Each TautomerTransform is defined by a SMARTS pattern where the transform involves moving a hydrogen from the first
    atom in the pattern to the last atom in the pattern. By default, alternating single and double bonds along the
    pattern are swapped accordingly to account for the hydrogen movement. If necessary, the transform can instead define
    custom resulting bond orders and also resulting atom charges.
    """
    BONDMAP = ...
    CHARGEMAP = ...
    def __init__(self, name, smarts, bonds=..., charges=..., radicals=...) -> None:
        """Initialize a TautomerTransform with a name, SMARTS pattern and optional bonds and charges.

        The SMARTS pattern match is applied to a Kekule form of the molecule, so use explicit single and double bonds
        rather than aromatic.

        Specify custom bonds as a string of ``-``, ``=``, ``#``, ``:`` for single, double, triple and aromatic bonds
        respectively. Specify custom charges as ``+``, ``0``, ``-`` for +1, 0 and -1 charges respectively.

        :param string name: A name for this TautomerTransform.
        :param string smarts: SMARTS pattern to match for the transform.
        :param string bonds: Optional specification for the resulting bonds.
        :param string charges: Optional specification for the resulting charges on the atoms.
        """
        ...
    
    @memoized_property
    def tautomer(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


class TautomerScore:
    """A substructure defined by SMARTS and its score contribution to determine the canonical tautomer."""
    def __init__(self, name, smarts, score) -> None:
        """Initialize a TautomerScore with a name, SMARTS pattern and score.

        :param name: A name for this TautomerScore.
        :param smarts: SMARTS pattern to match a substructure.
        :param score: The score to assign for this substructure.
        """
        ...
    
    @memoized_property
    def smarts(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    


TAUTOMER_TRANSFORMS = ...
TAUTOMER_SCORES = ...
MAX_TAUTOMERS = ...
class TautomerCanonicalizer:
    """

    """
    def __init__(self, transforms=..., scores=..., max_tautomers=...) -> None:
        """

        :param transforms: A list of TautomerTransforms to use to enumerate tautomers.
        :param scores: A list of TautomerScores to use to choose the canonical tautomer.
        :param max_tautomers: The maximum number of tautomers to enumerate, a limit to prevent combinatorial explosion.
        """
        ...
    
    def __call__(self, mol): # -> Any | int:
        """Calling a TautomerCanonicalizer instance like a function is the same as calling its canonicalize(mol) method."""
        ...
    
    def canonicalize(self, mol): # -> Any | int:
        """Return a canonical tautomer by enumerating and scoring all possible tautomers.

        :param mol: The input molecule.
        :type mol: :rdkit:`Mol <Chem.rdchem.Mol-class.html>`
        :return: The canonical tautomer.
        :rtype: :rdkit:`Mol <Chem.rdchem.Mol-class.html>`
        """
        ...
    


class TautomerEnumerator:
    """

    """
    def __init__(self, transforms=..., max_tautomers=...) -> None:
        """

        :param transforms: A list of TautomerTransforms to use to enumerate tautomers.
        :param max_tautomers: The maximum number of tautomers to enumerate (limit to prevent combinatorial explosion).
        """
        ...
    
    def __call__(self, mol): # -> list[Unknown]:
        """Calling a TautomerEnumerator instance like a function is the same as calling its enumerate(mol) method."""
        ...
    
    def enumerate(self, mol): # -> list[Unknown]:
        """Enumerate all possible tautomers and return them as a list.

        :param mol: The input molecule.
        :type mol: :rdkit:`Mol <Chem.rdchem.Mol-class.html>`
        :return: A list of all possible tautomers of the molecule.
        :rtype: list of :rdkit:`Mol <Chem.rdchem.Mol-class.html>`
        """
        ...
    


