"""
This type stub file was generated by pyright.
"""

import os
import warnings
import numpy
from importlib.util import find_spec
from rdkit.Chem.Draw import rdMolDraw2D
from rdkit.Chem.Draw.MolDrawing import DrawingOptions, MolDrawing
from rdkit.Chem.Draw.rdMolDraw2D import *
from rdkit.Chem import rdDepictor
from rdkit import Chem, RDConfig, rdBase
from io import BytesIO
from collections import namedtuple

if find_spec('rdkit.Chem.Draw.rdMolDraw2DQt') and _sip_available():
  def MolDraw2DFromQPainter(qpainter, width=..., height=..., panelWidth=..., panelHeight=...):
    ...
  
def MolToImage(mol, size=..., kekulize=..., wedgeBonds=..., fitImage=..., options=..., canvas=..., **kwargs): # -> tuple[Image | Unknown | None, Canvas | Unknown, MolDrawing] | Image | bytes | None:
  """Returns a PIL image containing a drawing of the molecule

      ARGUMENTS:

        - kekulize: run kekulization routine on input `mol` (default True)

        - size: final image size, in pixel (default (300,300))

        - wedgeBonds: draw wedge (stereo) bonds (default True)

        - highlightAtoms: list of atoms to highlight (default [])

        - highlightBonds: list of bonds to highlight (default [])

        - highlightColor: RGB color as tuple (default [1, 0, 0])

      NOTE:

            use 'matplotlib.colors.to_rgb()' to convert string and
            HTML color codes into the RGB tuple representation, eg.

              from matplotlib.colors import ColorConverter
              img = Draw.MolToImage(m, highlightAtoms=[1,2], highlightColor=ColorConverter().to_rgb('aqua'))
              img.save("molecule.png")

      RETURNS:

        a PIL Image object
  """
  ...

def MolToFile(mol, filename, size=..., kekulize=..., wedgeBonds=..., imageType=..., fitImage=..., options=..., **kwargs): # -> None:
  """ Generates a drawing of a molecule and writes it to a file
  """
  ...

def MolToImageFile(mol, filename, size=..., kekulize=..., wedgeBonds=..., **kwargs): # -> None:
  """  DEPRECATED:  please use MolToFile instead

  """
  ...

def ShowMol(mol, size=..., kekulize=..., wedgeBonds=..., title=..., stayInFront=..., **kwargs): # -> None:
  """ Generates a picture of a molecule and displays it in a Tkinter window
  """
  ...

def MolToMPL(mol, size=..., kekulize=..., wedgeBonds=..., imageType=..., fitImage=..., options=..., **kwargs): # -> Figure:
  """ Generates a drawing of a molecule on a matplotlib canvas
  """
  ...

def calcAtomGaussians(mol, a=..., step=..., weights=...): # -> tuple[Any, Any, Unknown]:
  """
useful things to do with these:
fig.axes[0].imshow(z,cmap=cm.gray,interpolation='bilinear',origin='lower',extent=(0,1,0,1))
fig.axes[0].contour(x,y,z,20,colors='k')

fig=Draw.MolToMPL(m);
contribs=Crippen.rdMolDescriptors._CalcCrippenContribs(m)
logps,mrs=zip(*contribs)
x,y,z=Draw.calcAtomGaussians(m,0.03,step=0.01,weights=logps)
fig.axes[0].imshow(z,cmap=cm.jet,interpolation='bilinear',origin='lower',extent=(0,1,0,1))
fig.axes[0].contour(x,y,z,20,colors='k',alpha=0.5)
fig.savefig('coumlogps.colored.png',bbox_inches='tight')


  """
  ...

def MolsToImage(mols, subImgSize=..., legends=..., **kwargs): # -> Image:
  """
  """
  ...

def MolsToGridImage(mols, molsPerRow=..., subImgSize=..., legends=..., highlightAtomLists=..., highlightBondLists=..., useSVG=..., returnPNG=..., **kwargs): # -> Image:
  ...

def ReactionToImage(rxn, subImgSize=..., useSVG=..., drawOptions=..., returnPNG=..., **kwargs): # -> Image:
  ...

def MolToQPixmap(mol, size=..., kekulize=..., wedgeBonds=..., fitImage=..., options=..., **kwargs):
  """ Generates a drawing of a molecule on a Qt QPixmap
    """
  ...

def DrawMorganBit(mol, bitId, bitInfo, whichExample=..., **kwargs):
  ...

def DrawMorganBits(tpls, **kwargs):
  ...

FingerprintEnv = ...
def DrawMorganEnvs(envs, molsPerRow=..., subImgSize=..., baseRad=..., useSVG=..., aromaticColor=..., ringColor=..., centerColor=..., extraColor=..., legends=..., drawOptions=..., **kwargs):
  ...

def DrawMorganEnv(mol, atomId, radius, molSize=..., baseRad=..., useSVG=..., aromaticColor=..., ringColor=..., centerColor=..., extraColor=..., drawOptions=..., **kwargs):
  ...

def DrawRDKitBits(tpls, **kwargs):
  ...

def DrawRDKitBit(mol, bitId, bitInfo, whichExample=..., **kwargs):
  ...

def DrawRDKitEnvs(envs, molsPerRow=..., subImgSize=..., baseRad=..., useSVG=..., aromaticColor=..., extraColor=..., nonAromaticColor=..., legends=..., drawOptions=..., **kwargs):
  ...

def DrawRDKitEnv(mol, bondPath, molSize=..., baseRad=..., useSVG=..., aromaticColor=..., extraColor=..., nonAromaticColor=..., drawOptions=..., **kwargs):
  ...

def SetComicMode(opts): # -> None:
  ...

