"""
This type stub file was generated by pyright.
"""

from rdkit.Chem.ChemUtils.DescriptorUtilities import setDescriptorVersion

"""

QED stands for quantitative estimation of drug-likeness and the concept was for the first time
introduced by Richard Bickerton and coworkers [1]. The empirical rationale of the QED measure
reflects the underlying distribution of molecular properties including molecular weight, logP,
topological polar surface area, number of hydrogen bond donors and acceptors, the number of
aromatic rings and rotatable bonds, and the presence of unwanted chemical functionalities.

The QED results as generated by the RDKit-based implementation of Biscu-it(tm) are not completely
identical to those from the original publication [1]. These differences are a consequence of
differences within the underlying calculated property calculators used in both methods. For
example, discrepancies can be noted in the results from the logP calculations, nevertheless
despite the fact that both approaches (Pipeline Pilot in the original publication and RDKit
in our Biscu-it(tm) implementation) mention to use the Wildman and Crippen methodology for the
calculation of their logP-values [2]. However, the differences in the resulting QED-values
are very small and are not compromising the usefulness of using Qed in your daily research.

[1] Bickerton, G.R.; Paolini, G.V.; Besnard, J.; Muresan, S.; Hopkins, A.L. (2012)
    'Quantifying the chemical beauty of drugs',
    Nature Chemistry, 4, 90-98 [https://doi.org/10.1038/nchem.1243]

[2] Wildman, S.A.; Crippen, G.M. (1999)
    'Prediction of Physicochemical Parameters by Atomic Contributions',
    Journal of Chemical Information and Computer Sciences, 39, 868-873 [https://doi.org/10.1021/ci990307l]

"""
QEDproperties = ...
ADSparameter = ...
WEIGHT_MAX = ...
WEIGHT_MEAN = ...
WEIGHT_NONE = ...
AliphaticRings = ...
AcceptorSmarts = ...
Acceptors = ...
StructuralAlertSmarts = ...
StructuralAlerts = ...
adsParameters = ...
def ads(x, adsParameter):
  """ ADS function """
  ...

def properties(mol): # -> QEDproperties:
  """
  Calculates the properties that are required to calculate the QED descriptor.
  """
  ...

@setDescriptorVersion(version='1.1.0')
def qed(mol, w=..., qedProperties=...): # -> float:
  """ Calculate the weighted sum of ADS mapped properties

  some examples from the QED paper, reference values from Peter G's original implementation
  >>> m = Chem.MolFromSmiles('N=C(CCSCc1csc(N=C(N)N)n1)NS(N)(=O)=O')
  >>> qed(m)
  0.253...
  >>> m = Chem.MolFromSmiles('CNC(=NCCSCc1nc[nH]c1C)NC#N')
  >>> qed(m)
  0.234...
  >>> m = Chem.MolFromSmiles('CCCCCNC(=N)NN=Cc1c[nH]c2ccc(CO)cc12')
  >>> qed(m)
  0.234...
  """
  ...

def weights_max(mol): # -> float:
  """
  Calculates the QED descriptor using maximal descriptor weights.
  """
  ...

def weights_mean(mol): # -> float:
  """
  Calculates the QED descriptor using average descriptor weights.
  """
  ...

def weights_none(mol): # -> float:
  """
  Calculates the QED descriptor using unit weights.
  """
  ...

def default(mol): # -> float:
  """
  Calculates the QED descriptor using average descriptor weights.
  """
  ...

if __name__ == '__main__':
  ...
