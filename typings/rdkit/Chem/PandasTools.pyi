"""
This type stub file was generated by pyright.
"""

import unittest

'''
Importing pandasTools enables several features that allow for using RDKit molecules as columns of a
Pandas dataframe.
If the dataframe is containing a molecule format in a column (e.g. smiles), like in this example:

>>> from rdkit.Chem import PandasTools
>>> import pandas as pd
>>> import os
>>> from rdkit import RDConfig
>>> antibiotics = pd.DataFrame(columns=['Name','Smiles'])
>>> antibiotics = antibiotics.append({'Smiles':'CC1(C(N2C(S1)C(C2=O)NC(=O)CC3=CC=CC=C3)C(=O)O)C',
...   'Name':'Penicilline G'}, ignore_index=True)#Penicilline G
>>> antibiotics = antibiotics.append({
...   'Smiles':'CC1(C2CC3C(C(=O)C(=C(C3(C(=O)C2=C(C4=C1C=CC=C4O)O)O)O)C(=O)N)N(C)C)O',
...   'Name':'Tetracycline'}, ignore_index=True)#Tetracycline
>>> antibiotics = antibiotics.append({
...   'Smiles':'CC1(C(N2C(S1)C(C2=O)NC(=O)C(C3=CC=CC=C3)N)C(=O)O)C',
...   'Name':'Ampicilline'}, ignore_index=True)#Ampicilline
>>> print([str(x) for x in  antibiotics.columns])
['Name', 'Smiles']
>>> print(antibiotics)
            Name                                             Smiles
0  Penicilline G    CC1(C(N2C(S1)C(C2=O)NC(=O)CC3=CC=CC=C3)C(=O)O)C
1   Tetracycline  CC1(C2CC3C(C(=O)C(=C(C3(C(=O)C2=C(C4=C1C=CC=C4...
2  Ampicilline  CC1(C(N2C(S1)C(C2=O)NC(=O)C(C3=CC=CC=C3)N)C(=O...

a new column can be created holding the respective RDKit molecule objects. The fingerprint can be
included to accelerate substructure searches on the dataframe.

>>> PandasTools.AddMoleculeColumnToFrame(antibiotics,'Smiles','Molecule',includeFingerprints=True)
>>> print([str(x) for x in  antibiotics.columns])
['Name', 'Smiles', 'Molecule']

A substructure filter can be applied on the dataframe using the RDKit molecule column,
because the ">=" operator has been modified to work as a substructure check.
Such the antibiotics containing the beta-lactam ring "C1C(=O)NC1" can be obtained by

>>> beta_lactam = Chem.MolFromSmiles('C1C(=O)NC1')
>>> beta_lactam_antibiotics = antibiotics[antibiotics['Molecule'] >= beta_lactam]
>>> print(beta_lactam_antibiotics[['Name','Smiles']])
            Name                                             Smiles
0  Penicilline G    CC1(C(N2C(S1)C(C2=O)NC(=O)CC3=CC=CC=C3)C(=O)O)C
2  Ampicilline  CC1(C(N2C(S1)C(C2=O)NC(=O)C(C3=CC=CC=C3)N)C(=O...


It is also possible to load an SDF file can be load into a dataframe.

>>> sdfFile = os.path.join(RDConfig.RDDataDir,'NCI/first_200.props.sdf')
>>> frame = PandasTools.LoadSDF(sdfFile,smilesName='SMILES',molColName='Molecule',
...            includeFingerprints=True)
>>> frame.info # doctest: +SKIP
<bound method DataFrame.info of <class 'pandas.core.frame.DataFrame'>
Int64Index: 200 entries, 0 to 199
Data columns:
AMW                       200  non-null values
CLOGP                     200  non-null values
CP                        200  non-null values
CR                        200  non-null values
DAYLIGHT.FPG              200  non-null values
DAYLIGHT_CLOGP            200  non-null values
FP                        200  non-null values
ID                        200  non-null values
ISM                       200  non-null values
LIPINSKI_VIOLATIONS       200  non-null values
NUM_HACCEPTORS            200  non-null values
NUM_HDONORS               200  non-null values
NUM_HETEROATOMS           200  non-null values
NUM_LIPINSKIHACCEPTORS    200  non-null values
NUM_LIPINSKIHDONORS       200  non-null values
NUM_RINGS                 200  non-null values
NUM_ROTATABLEBONDS        200  non-null values
P1                        30  non-null values
SMILES                    200  non-null values
Molecule                  200  non-null values
dtypes: object(20)>

The standard ForwardSDMolSupplier keywords are also available:

>>> sdfFile = os.path.join(RDConfig.RDDataDir,'NCI/first_200.props.sdf')
>>> frame = PandasTools.LoadSDF(sdfFile,smilesName='SMILES',molColName='Molecule',
...            includeFingerprints=True, removeHs=False, strictParsing=True)

Conversion to html is quite easy:

>>> htm = frame.to_html() # doctest:
...
>>> str(htm[:36])
'<table border="1" class="dataframe">'

In order to support rendering the molecules as images in the HTML export of the dataframe,
the __str__ method is monkey-patched to return a base64 encoded PNG:

>>> molX = Chem.MolFromSmiles('Fc1cNc2ccccc12')
>>> print(molX) # doctest: +SKIP
<img src="data:image/png;base64,..." alt="Mol"/>
This can be reverted using the ChangeMoleculeRendering method
>>> ChangeMoleculeRendering(renderer='String')
>>> print(molX) # doctest: +SKIP
<rdkit.Chem.rdchem.Mol object at 0x10d179440>
>>> ChangeMoleculeRendering(renderer='PNG')
>>> print(molX) # doctest: +SKIP
<img src="data:image/png;base64,..." alt="Mol"/>

'''
log = ...
if pd:
  ...
else:
  fmt = ...
highlightSubstructures = ...
molRepresentation = ...
molSize = ...
def patchPandasrepr(self, **kwargs):
  """  used to patch DataFrame._repr_html_ in pandas version > 0.25.0
  """
  ...

def patchPandasHTMLrepr(self, **kwargs):
  """A patched version of the DataFrame.to_html method that allows rendering
    molecule images in data frames.
  """
  ...

def is_molecule_image(s): # -> bool:
  ...

class RenderMoleculeAdjustment:
  def __init__(self, inner_adjustment) -> None:
    """Creates a new instance.

        @param inner_adjustment: The text adjustment that is used if the
            specified text is not valid XML / HTML.
        """
    ...
  
  def len(self, text): # -> Literal[0]:
    ...
  
  def justify(self, texts, max_len, mode=...):
    ...
  
  def adjoin(self, space, *lists, **kwargs):
    ...
  


def PrintAsBase64PNGString(x, renderer=...): # -> str:
  '''returns the molecules as base64 encoded PNG image
    '''
  ...

def PrintDefaultMolRep(x): # -> str:
  ...

def RenderImagesInAllDataFrames(images=...): # -> None:
  '''Changes the default dataframe rendering to not escape HTML characters, thus allowing
    rendered images in all dataframes.
    IMPORTANT: THIS IS A GLOBAL CHANGE THAT WILL AFFECT TO COMPLETE PYTHON SESSION. If you want
    to change the rendering only for a single dataframe use the "ChangeMoleculeRendering" method
    instead.
    '''
  ...

def AddMoleculeColumnToFrame(frame, smilesCol=..., molCol=..., includeFingerprints=...): # -> None:
  '''Converts the molecules contains in "smilesCol" to RDKit molecules and appends them to the
    dataframe "frame" using the specified column name.
    If desired, a fingerprint can be computed and stored with the molecule objects to accelerate
    substructure matching
    '''
  ...

def ChangeMoleculeRendering(frame=..., renderer=...): # -> None:
  '''Allows to change the rendering of the molecules between base64 PNG images and string
    representations.
    This serves two purposes: First it allows to avoid the generation of images if this is
    not desired and, secondly, it allows to enable image rendering for newly created dataframe
    that already contains molecules, without having to rerun the time-consuming
    AddMoleculeColumnToFrame. Note: this behaviour is, because some pandas methods, e.g. head()
    returns a new dataframe instance that uses the default pandas rendering (thus not drawing
    images for molecules) instead of the monkey-patched one.
    '''
  ...

def LoadSDF(filename, idName=..., molColName=..., includeFingerprints=..., isomericSmiles=..., smilesName=..., embedProps=..., removeHs=..., strictParsing=...): # -> DataFrame:
  '''Read file in SDF format and return as Pandas data frame.
    If embedProps=True all properties also get embedded in Mol objects in the molecule column.
    If molColName=None molecules would not be present in resulting DataFrame (only properties
    would be read).
    '''
  ...

def WriteSDF(df, out, molColName=..., idName=..., properties=..., allNumeric=...): # -> None:
  '''Write an SD file for the molecules in the dataframe. Dataframe columns can be exported as
    SDF tags if specified in the "properties" list. "properties=list(df.columns)" would export
    all columns.
    The "allNumeric" flag allows to automatically include all numeric columns in the output.
    User has to make sure that correct data type is assigned to column.
    "idName" can be used to select a column to serve as molecule title. It can be set to
    "RowID" to use the dataframe row key as title.
    '''
  ...

_saltRemover = ...
def RemoveSaltsFromFrame(frame, molCol=...): # -> None:
  '''
    Removes salts from mols in pandas DataFrame's ROMol column
    '''
  ...

def SaveSMILESFromFrame(frame, outFile, molCol=..., NamesCol=..., isomericSmiles=...): # -> None:
  '''
    Saves smi file. SMILES are generated from column with RDKit molecules. Column
    with names is optional.
    '''
  ...

def SaveXlsxFromFrame(frame, outFile, molCol=..., size=...): # -> None:
  """
      Saves pandas DataFrame as a xlsx file with embedded images.
      It maps numpy data types to excel cell types:
      int, float -> number
      datetime -> datetime
      object -> string (limited to 32k character - xlsx limitations)

      Cells with compound images are a bit larger than images due to excel.
      Column width weirdness explained (from xlsxwriter docs):
      The width corresponds to the column width value that is specified in Excel.
      It is approximately equal to the length of a string in the default font of Calibri 11.
      Unfortunately, there is no way to specify "AutoFit" for a column in the Excel file format.
      This feature is only available at runtime from within Excel.
      """
  ...

def FrameToGridImage(frame, column=..., legendsCol=..., **kwargs):
  '''
    Draw grid image of mols in pandas DataFrame.
    '''
  ...

def AddMurckoToFrame(frame, molCol=..., MurckoCol=..., Generic=...): # -> None:
  '''
    Adds column with SMILES of Murcko scaffolds to pandas DataFrame.

    Generic set to true results in SMILES of generic framework.
    '''
  ...

def AlignMol(mol, scaffold):
  """
    Aligns mol (RDKit mol object) to scaffold (SMILES string)
    """
  ...

def AlignToScaffold(frame, molCol=..., scaffoldCol=...): # -> None:
  '''
    Aligns molecules in molCol to scaffolds in scaffoldCol
    '''
  ...

def RGroupDecompositionToFrame(groups, mols, include_core=..., redraw_sidechains=...): # -> DataFrame:
  """ returns a dataframe with the results of R-Group Decomposition

  >>> from rdkit import Chem
  >>> from rdkit.Chem import rdRGroupDecomposition
  >>> from rdkit.Chem import PandasTools
  >>> import pandas as pd
  >>> scaffold = Chem.MolFromSmiles('c1ccccn1')
  >>> mols = [Chem.MolFromSmiles(smi) for smi in 'c1c(F)cccn1 c1c(Cl)c(C)ccn1 c1c(O)cccn1 c1c(F)c(C)ccn1 c1cc(Cl)c(F)cn1'.split()]
  >>> groups,_ = rdRGroupDecomposition.RGroupDecompose([scaffold],mols,asSmiles=False,asRows=False) 
  >>> df = PandasTools.RGroupDecompositionToFrame(groups,mols,include_core=True)
  >>> list(df.columns)
  ['Mol', 'Core', 'R1', 'R2']
  >>> len(df)
  5
  >>> df.columns() # doctest: +SKIP
  <class 'pandas*...*DataFrame'>
  RangeIndex: 5 entries, 0 to 4
  Data columns (total 4 columns):
  Mol     5 non-null object
  Core    5 non-null object
  R1      5 non-null object
  R2      5 non-null object
  dtypes: object(4)
  memory usage: *...*

  """
  ...

def InstallPandasTools(): # -> None:
  """ Monkey patch a few RDkit methods of Chem.Mol """
  ...

def UninstallPandasTools(): # -> None:
  """ Monkey patch a few RDkit methods of Chem.Mol """
  ...

_originalSettings = ...
if __name__ == '__main__':
  class TestCase(unittest.TestCase):
    @unittest.skipIf(xlsxwriter is None, 'xlsxwriter not installed')
    def testGithub1507(self): # -> None:
      ...
    
    def testGithub3701(self): # -> None:
      ' problem with update to pandas v1.2.0 '
      ...
    
  
  
