# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

name: $(BuildID)

trigger:
- master

# Note - Turn off builds for pull requests (on by default)
pr: none

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python37:
        python.version: '3.7'
        conda.environment: 'environments/dev-environment-37.yml'
    maxParallel: 4

  steps:
  - bash: echo "##vso[task.prependpath]/usr/share/miniconda/bin"
    displayName: Add conda to PATH

  - script: conda env create --quiet --file $(conda.environment)
    displayName: Create Anaconda environment

  - script: |
      source activate dev-environment
      flake8 .
    displayName: 'Run lint tests'

  - script: |
      source activate dev-environment
      pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=chemmltoolkit --cov-report=xml --cov-report=html
    displayName: 'Test with pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-*.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
    condition: succeededOrFailed()

- job: 'Publish'
  dependsOn: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - bash: echo "##vso[task.prependpath]/usr/share/miniconda/bin"
    displayName: Add conda to PATH

  - script: conda env create --quiet --file environments/dev-environment-37.yml
    displayName: Create Anaconda environment

  - script: sed -i "s/'$/.dev$(Build.BuildNumber)'/g" chemmltoolkit/__version__.py
    displayName: 'Update version string'

  - script: |
      source activate dev-environment
      python setup.py sdist bdist_wheel
    displayName: 'Build project'

  - task: TwineAuthenticate@0
    inputs:
      artifactFeeds: 'ChemMLToolkit'
      externalFeeds: 'PyPi-Upload'
    displayName: Add twine credentials

  - script: |
      source activate dev-environment
      twine upload -r ChemMLToolkit --config-file $(PYPIRC_PATH) dist/*
      twine upload -r PyPi-Upload --config-file $(PYPIRC_PATH) dist/*
    displayName: Publish to Azure Artifacts
